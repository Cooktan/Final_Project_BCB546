xyy <- separate(xy, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4)) %>% select(c(gene, cell, rep, value))
xyy <- separate(xy, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% select(c(gene, cell, rep, count))
rna3 <- separate(rna1, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% select(c(gene, cell, rep, count))
View(rna3)
count(rna3$cell)
str(rna3)
rna3 %>% group_by(cell) %>% summarise(n=n())
rna3 %>% group_by(cell) %>% summarise(n=n())
rna3 %>% group_by(cell) %>% summarise(count=n())
y <- rna3 %>% group_by(cell) %>% summarise(count=n())
View(y)
count(rna3, cell)
yy <- count(rna3, cell)
#Count unique cells.
yy <- count(rna3, cell)
yy
#Count unique cells.
how_many_cells <- count(rna3, cell)
View(how_many_cells)
arrange(yy, cell)
xx <-narrange(yy, cell)
xx <- arrange(yy, cell)
View(xx)
#used this to learn the separate column name
xy <- head(rna1)
xyy <- separate(xy, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% as.numeric(c('cell', 'rep'))%>% select(c(gene, cell, rep, count))
xyy <- separate(xy, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% as.numeric(c('cell'))%>% select(c(gene, cell, rep, count))
xyy <- separate(xy, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% as.numeric('cell')%>% select(c(gene, cell, rep, count))
xyy <- separate(xy, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% as.numeric(cell)%>% select(c(gene, cell, rep, count))
xyy <- separate(xy, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% select(c(gene, cell, rep, count))
xyy <- separate(xy, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% select(c(gene, cell, rep, count))
%>% as.numeric(cell)
xy2 <- as.numeric(cell)
xy2 <- as.numeric(xyy$cell)
xy2 <- as.numeric(as.character(xyy$cell))
xy2 <- as.numeric(as.character(xyy$cell))
xy2[, c(2,3)] <- sapply(xy2[,c(2,3)], as.numeric)
xy2 <- as.numeric(as.character(xyy$cell))
str(xy2)
xyy[, c(2,3)] <- sapply(xyy[,c(2,3)], as.numeric)
str(xy2)
str(xyy)
xyy <- separate(xy, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% select(c(gene, cell, rep, count))
str(xyy)
xyy[, c(2,3)] <- sapply(xyy[,c(2,3)], as.numeric)
str(xyy)
xyy <- separate(xy, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% select(c(gene, cell, rep, count)) %>% sapply(c(2,3), as.numeric)
#used this to learn the separate column name
xy <- head(rna1)
xyy <- separate(xy, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% select(c(gene, cell, rep, count))
str(xyy)
count(xyy$cell)
#check Structure
str(xyy)
xyy <- separate(xy, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% select(c(gene, cell, rep, count))
#check structure
str(xyy)
#convert cell & rep into numeric
xyy[, c(2,3)] <- sapply(xyy[,c(2,3)], as.numeric)
#check Structure
str(xyy)
count(xyy$cell)
how_many_cells
View(how_many_cells)
how_many_cells2 <- length(unique(rna3$cell))
#Count unique cells.
how_many_cells <- count(rna3, cell)
View(how_many_cells)
#Count unique cells.
n.cells <- count(rna3, cell) #we get 206 instead of 216
which(!(seq(min(n.cells), max(n.cells)) %in% n.cells))
#convert cell & rep into numeric
n.cells[, 1] <- n.cells(xyy[,1], as.numeric)
#Count unique cells.
n.cells <- count(rna3, cell) #we get 206 instead of 216
#convert cell & rep into numeric
n.cells[, 1] <- n.cells(xyy[,1], as.numeric)
#convert cell & rep into numeric
n.cells[, 1] <- sapply(n.cells[,1], as.numeric)
which(!(seq(min(n.cells), max(n.cells)) %in% n.cells))
View(n.cells)
min(n.cells)
max(n.cells)
unique(rna3$cell)
n.cells <- unique(rna3$cell)
n.cells
#convert cell & rep into numeric
#n.cells[, 1] <- sapply(n.cells[,1], as.numeric)
which(!(seq(min(n.cells), max(n.cells)) %in% n.cells))
min(n.cells)
max(n.cells)
n.cells <- unique(rna3$cell)
min(n.cells)
max(n.cells)
#Count unique cells.
n.cells<- count(rna3, cell) #we get 206 instead of 216
n.cells <- unique(rna3$cell)
n.cells2 <- unique(rna3$cell)
min(n.cells2)
max(n.cells2)
n.cells2 <- unique(as.numeric(rna3$cell))
min(n.cells2)
max(n.cells2)
#convert cell & rep into numeric
#n.cells[, 1] <- sapply(n.cells[,1], as.numeric)
which(!(seq(min(n.cells2), max(n.cells2)) %in% n.cells2))
#Count unique cells.
n.cells <- unique(as.numeric(rna3$cell))
min(n.cells)
max(n.cells)
#list of all cells that failed to pass QC test
failed <- c(8,12,18,22,25,42,52,54,55,62,63,64,66,67,69,73,75,
76,77,81,82,83,84,86,88,89,90,91,92,93,95,96,106,113,
121,123,124,127,129,130,140,141,142,143,144,145,146,147,
148,149,153,157,163,165,166,167,168,169,170,171,172,173,
176,182,185,186,187,188,189,191,194,216)
rna4 <- filter(rna3, cell != failed)
rna4 <- filter(rna3, !cell %in% failed)
rna4 <- filter(rna3, cell %in% failed)
rna4 <- filter(rna3, !cell %in% failed)
suppressMessages(library(tidyverse))
str(rna)
View(rna4)
##convert cell & rep into numeric & Count unique cells.
n.cells2 <- unique(as.numeric(rna4$cell))
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(tidyverse))
#Set working directory
setwd('.')
getwd()
list.files()
#Read data
rna <- read_csv('./GSE121039_AR_scRNAseq_transcript_counts.csv')
#str(rna)
head(rna)
#rename first column
rna <- rename(rna, gene = X1)
#get into long format
rna1 <- pivot_longer(rna, cols = starts_with('Cell'))
#separate name into 4 columns
#rename the columns
#select the columns
rna3 <- separate(rna1, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% select(c(gene, cell, rep, count))
##convert cell & rep into numeric & Count unique cells.
n.cells <- unique(as.numeric(rna3$cell))
min(n.cells)
max(n.cells)
#We get 206 cells??
#Find which cells are absent?
which(!(seq(min(n.cells), max(n.cells)) %in% n.cells))
#cells missing
#42,95,166,167,168,169,186,187,189
#list of all cells that failed to pass QC test
#obtained from T1 of paper
#notice the cells missing from n.cells are here!!
failed <- c(8,12,18,22,25,42,52,54,55,62,63,64,66,67,69,73,75,
76,77,81,82,83,84,86,88,89,90,91,92,93,95,96,106,113,
121,123,124,127,129,130,140,141,142,143,144,145,146,147,
148,149,153,157,163,165,166,167,168,169,170,171,172,173,
176,182,185,186,187,188,189,191,194,216)
#Filter following cells that failed to pass QC
rna4 <- filter(rna3, !cell %in% failed)
##convert cell & rep into numeric & Count unique cells.
n.cells2 <- unique(as.numeric(rna4$cell)) #now we have 144 cells
#rna4 contains all cells that passed QC and were used in the analysis
ggplot(rna2, mapping = aes(x=gene, color=gene)) + geom_bar()
View(rna4)
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
rna5 <- group_by(rna4, cell) %>% summarise(n=n())
View(rna5)
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
rna5 <- group_by(rna4, cell) %>% summarise(Total=sum(rep))
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
rna5 <- group_by(rna4, cell) %>% mutate(Total=sum(rep))
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
rna5 <- group_by(rna4, cell) %>% summarise(sum = sum(rep), n=n())
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
rna5 <- rna4 %>%  group_by(cell) %>% summarise(sum = sum(rep), n=n())
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
rna5 <- rna4 %>%  group_by(cell) %>% summarise(sum = mean(rep), n=n())
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
rna5 <- rna4 %>%  group_by(cell) %>% summarise(sum = mean(rep), n=n())
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
rna5 <- rna4 %>%  group_by(cell) %>% summarise(sum = sum(rep), n=n())
rlang::last_error()
rlang::last_trace()
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
rna5 <- rna4 %>%  group_by(cell) %>% summarise(sum = sum(value), n=n())
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
rna5 <- rna4 %>%  group_by(gene,as.character(cell)) %>% summarise(sum = sum(value), n=n())
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
rna5 <- rna4 %>%  group_by(gene,cell) %>% summarise(n=n(), sum = sum(count))
View(rna5)
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
rna5 <- rna4 %>%  group_by(gene,cell, .groups) %>% summarise(n=n(), sum = sum(count))
n.cells3 <- unique(as.numeric(rna5$cell))
rna6 <- filter(rna5, n==1)
n.cells4 <- unique(as.numeric(rna5$cell))
n.cells4 <- unique(as.numeric(rna6$cell))
rna6 <- filter(rna5, n!=1)
n.cells4 <- unique(as.numeric(rna6$cell))
View(rna6)
rna7 <- rna4 %>%  pivot_wider(names_from = cell, values_from = count)
View(rna7)
rna7 <- rna4 %>%  pivot_wider(names_from = cell, values_from = count, name_prefix='cell')
rna7 <- rna4 %>%  pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
rna10 <- rna4 %>%  unite(c(cell, rep), sep = '_')
rna10 <- rna4 %>%  unite(c(cell, rep), sep = "_")
rna10 <- rna4 %>%  unite("Cell",c(cell, rep), sep = "_")
View(rna10)
rna10 <- rna4 %>%  unite("cell",c(cell, rep), sep = "_")
rna7 <- rna10 %>%  pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
#PCA
#pivot the data wider for PCA
#First join two columns (cell, rep) into one column cell
#Pivot wider
rna7 <- rna4 %>%  unite("cell",c(cell, rep), sep = "_") %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
View(rna7)
mtcars
install.packages('prcomp')
library(prcomp)
install.packages('prcomp')
library(prcomp)
install.packages('prcomp')
updateR()
setRepositories()
install.packages('prcomp')
install.packages("RTools")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("prcomp")
setRepositories()
install.packages("prcomp")
install.packages("prcomp")
install.packages("prcomp")
search()
setRepositories()
install.packages("prcomp")
options(repos = getOption("repos")["CRAN"])
install.packages("prcomp")
install.packages("prcomp")
update.packages()
install.packages("prcomp")
install.packages('installr')
updateR()
library(installr)
updateR()
updateR()
install.packages("FactoMineR")
knitr::opts_chunk$set(echo = TRUE)
library("devtools")
install.packages("devtools")
install_github("kassambara/factoextra")
library(devtools)
install_github("kassambara/factoextra")
#library(devtools)
#install_github("kassambara/factoextra")
library("factoextra")
rna.pca <- PCA(rna7, graph=FALSE)
#Could not get prcomp to work here so I had to find alternatives
library("FactoMineR")
rna.pca <- PCA(rna7, graph=FALSE)
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(tidyverse))
#Set working directory
setwd('.')
getwd()
list.files()
#Read data
rna <- read_csv('./GSE121039_AR_scRNAseq_transcript_counts.csv')
#str(rna)
head(rna)
#rename first column
rna <- rename(rna, gene = X1)
#get into long format
rna1 <- pivot_longer(rna, cols = starts_with('Cell'))
#separate name into 4 columns
#rename the columns
#select the columns
rna3 <- separate(rna1, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% select(c(gene, cell, rep, count))
##convert cell & rep into numeric & Count unique cells.
n.cells <- unique(as.numeric(rna3$cell))
min(n.cells)
max(n.cells)
#We get 206 cells??
#Find which cells are absent?
which(!(seq(min(n.cells), max(n.cells)) %in% n.cells))
#cells missing
#42,95,166,167,168,169,186,187,189
#list of all cells that failed to pass QC test
#obtained from T1 of paper
#notice the cells missing from n.cells are here!!
failed <- c(8,12,18,22,25,42,52,54,55,62,63,64,66,67,69,73,75,
76,77,81,82,83,84,86,88,89,90,91,92,93,95,96,106,113,
121,123,124,127,129,130,140,141,142,143,144,145,146,147,
148,149,153,157,163,165,166,167,168,169,170,171,172,173,
176,182,185,186,187,188,189,191,194,216)
#Filter following cells that failed to pass QC
rna4 <- filter(rna3, !cell %in% failed)
##convert cell & rep into numeric & Count unique cells.
n.cells2 <- unique(as.numeric(rna4$cell)) #now we have 144 cells
#rna4 contains all cells that passed QC and were used in the analysis
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
#pooling cells using sum
rna5 <- rna4 %>%  group_by(gene,cell,) %>% summarise(n=n(), sum = sum(count))
n.cells3 <- unique(as.numeric(rna5$cell))
rna6 <- filter(rna5, n!=1)
n.cells4 <- unique(as.numeric(rna6$cell)) #We get 128 cells
#PCA
#pivot the data wider for PCA
#First join two columns (cell, rep) into one column cell
#Pivot wider
rna7 <- rna4 %>%  unite("cell",c(cell, rep), sep = "_") %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
#Could not get prcomp to work here so I had to find alternatives
library("FactoMineR")
#library(devtools)
#install_github("kassambara/factoextra")
library("factoextra")
#pca
rna.pca <- PCA(rna7, graph=FALSE)
#pca
#remove gene title
rna7 <- rna7 %>%  rename(""=gene)
#pca
#remove gene title
rna7 <- rna7 %>%  rename(" "=gene)
rna.pca <- PCA(rna7, graph=FALSE)
View(rna7)
View(rna7)
rna7 <- as.numeric(as.matrix(rna7))
#PCA
#pivot the data wider for PCA
#First join two columns (cell, rep) into one column cell
#Pivot wider
rna7 <- rna4 %>%  unite("cell",c(cell, rep), sep = "_") %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
#pca
#remove gene title
rna7 <- rna7 %>%  rename(" "=gene)
rna7_mat <- as.numeric(as.matrix(rna7))
dim(matrix)
dim(rna7_mat)
dim(rna7_mat) <- dim(rna7)
rna.pca <- PCA(rna7, graph=FALSE)
cor.mat <- round(cor(rna7),2)
cor.mat <- round(cor(rna7),2)
View(rna7_mat)
cor.mat <- cor(rna7)
rna.pca <- PCA(rna7, graph=FALSE)
rna8 <- rna7 %>% remove_rownames %>% column_to_rownames(var = "names")
#PCA
#pivot the data wider for PCA
#First join two columns (cell, rep) into one column cell
#Pivot wider
rna7 <- rna4 %>%  unite("cell",c(cell, rep), sep = "_") %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
#pca
#remove gene title
rna8 <- rna7 %>%  rename(" "=gene)
rna9 <- rna7 %>% remove_rownames %>% column_to_rownames(var = "gene")
View(rna9)
rna.pca <- PCA(rna9, graph=FALSE)
print(rna.pca)
eigenvalues <- rna.pca$eig
head(eigenvalues[, 1:2])
#plot eigenvalues vs variance
barplot(eigenvalues[, 2], names.arg=1:nrow(eigenvalues),
main = "Variances",
xlab = "Principal Components",
ylab = "Percentage of variances",
col ="steelblue")
#plot eigenvalues vs variance
barplot(eigenvalues[, 2], names.arg=1:10),
#plot eigenvalues vs variance
barplot(eigenvalues[, 2], names.arg=eigenvalues[1:10]),
#plot eigenvalues vs variance
barplot(eigenvalues[, 2], names.arg=eigenvalues[1:10,]),
#plot eigenvalues vs variance
barplot(eigenvalues[, 2], names.arg=eigenvalues[1:10,]),
#plot eigenvalues vs variance
barplot(eigenvalues[, 2],
main = "Variances",
xlab = "Principal Components",
ylab = "Percentage of variances",
col ="steelblue")
#plot eigenvalues vs variance
barplot(eigenvalues[, 1:10], names.arg=eigenvalues[1:10,]),
#plot eigenvalues vs variance
barplot(eigenvalues[, 1:10],
main = "Variances",
xlab = "Principal Components",
ylab = "Percentage of variances",
col ="steelblue")
View(eigenvalues)
head(eigenvalues[, 1:2])
head(eigenvalues[, 1:3])
head(eigenvalues[, 1:2])
head(eigenvalues[, 1:2])
to_plot <- head(eigenvalues[, 1:2])
#plot eigenvalues vs variance
barplot(to_plot[,2],
main = "Variances",
xlab = "Principal Components",
ylab = "Percentage of variances",
col ="steelblue")
# Add connected line segments to the plot
lines(x = 1:nrow(eigenvalues), eigenvalues[, 2],
type="b", pch=19, col = "red")
#plot eigenvalues vs variance
barplot(to_plot[,2], names.arg=1:nrow(to_plot),
main = "Variances",
xlab = "Principal Components",
ylab = "Percentage of variances",
col ="steelblue")
# Add connected line segments to the plot
lines(x = 1:nrow(to_plot), to_plot[, 2],
type="b", pch=19, col = "red")
#plot eigenvalues vs variance
barplot(to_plot[,2], names.arg=1:nrow(to_plot),
main = "Variances",
xlab = "Principal Components",
ylab = "Percentage of variances",
col ="steelblue") +
# Add connected line segments to the plot
lines(x = 1:nrow(to_plot), to_plot[, 2],
type="b", pch=19, col = "red")
install.packages("princurve")
library(princurve)
fviz_screeplot(rna.pca, ncp=10)
fviz_screeplot(rna.pca, ncp=10)
plot.PCA(rna.pca, axes = c(1,2), choix=c("ind", "var"))
plot.PCA(rna.pca)
plot.PCA(rna.pca, axes = c(1,2), choix=c("ind", "var")
plot.PCA(rna.pca, axes = c(1,2), choix=c("ind", "var")
plot.PCA(rna.pca, axes = c(1,2), choix=c("ind", "var"))
plot.PCA(rna.pca, axes = c(1,2))
plot.PCA(rna.pca, axes = c(1,2), choix=c("ind", "var"))
fviz_pca_var(rna.pca)
fviz_pca_var(rna.pca, alpha.var="contrib")+
theme_minimal()
fviz_pca_ind(rna.pca, col.ind="cos2") +
scale_color_gradient2(low="blue", mid="white",
high="red", midpoint=0.50)
fviz_pca_var(rna.pca, col.var="contrib")
ggplot(data = rna.pca, aes(x = PC1, y = PC2,
colour = Treatment,
label = Treatment)) +
geom_text()
plot.PCA(rna.pca, axes = c(1,2), choix=c("ind", "var"))
plot.PCA(rna.pca, axes = c(1,2))
choix=c("ind", "var")
rna.pca2 <- prcomp(rna7[,2:], center=TRUE)
rna.pca2 <- prcomp(rna7[,c(2:)], center=TRUE)
rna.pca2 <- prcomp(rna7[,c(2:)], center=TRUE, scale=TRUE)
rna.pca2 <- prcomp(rna7[,c(2:)], center=TRUE, scale.=TRUE)
rna.pca2 <- prcomp(rna7[,2:], center=TRUE, scale.=TRUE)
rna.pca2 <- prcomp(rna7[,2:], center=TRUE, scale.=TRUE)
rna.pca2 <- prcomp(rna7[,2:], center=TRUE, scale.=TRUE)
View(rna7)
rna.pca2 <- prcomp(rna7[,1:], center=TRUE, scale.=TRUE)
rna.pca2 <- prcomp(rna7[,1:], center=TRUE, scale.=TRUE)
rna.pca2 <- prcomp(rna7[,2:], center=TRUE, scale.=TRUE)
rna.pca2 <- prcomp(rna7[,3:], center=TRUE, scale.=TRUE)
rna.pca2 <- prcomp(rna7[,2:], center=TRUE, scale.=TRUE)
rna.pca2 <- prcomp(rna7[,2:])
rna.pca2 <- prcomp(rna9[,2:])
rna.pca2 <- prcomp(rna9[,2:])
rna.pca2 <- prcomp(rna7[,2:])
prcomp(rna7[,2:])
yy <- rna7[,2:]
yy <- rna7[:,2:]
yy <- rna7[,2]
View(yy)
yy <- rna7[,2:]
yy <- rna7[,2:ncol]
yy <- rna7[,2:ncol(rna7)]
View(yy)
rna.pca2 <- prcomp(rna7[,2:ncol(rna7)], center=TRUE, scale.=TRUE)
summary(rna.pca2)
install.packages(“vqv/ggbiplot”)
install.packages(“vqv/ggbiplot”)
install.packages("vqv/ggbiplot")
library(devtools)
install.packages(“vqv/ggbiplot”)
install.packages(vqv/ggbiplot)
install.packages("vqv/ggbiplot")
library(devtools)
install.packages("vqv/ggbiplot")
install_github("vqv/ggbiplot")
#install_github("vqv/ggbiplot")
install.packages("vqv/ggbiplot")
library(vqv/ggbiplot)
#install_github("vqv/ggbiplot")
install_github(“vqv/ggbiplot”)
#install_github("vqv/ggbiplot")
install_github("vqv/ggbiplot")
#install_github("vqv/ggbiplot")
library(ggbiplot)
ggbiplot(rna.pca2)
