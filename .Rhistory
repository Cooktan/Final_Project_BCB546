<<<<<<< HEAD
BiocManager::install("monocle")
I=PCA$x %>%
library("monocle")
Cell_order= orderCells(PCA)
library(monocle)
Cell_order= orderCells(PCA)
View(rna)
View(rna9)
View(rna7)
pd <- new("AnnotatedDataFrame", data = rna7$gene)
#Using Monocle
rna7df= as.data.frame(rna7)
d <- new("AnnotatedDataFrame", data = rna7$gene)
fit_pseudotime(PCA, clusters= NULL)
BiocManager::install("embeddr")
BiocManager::install("embeddr")
#Trying the PCA wi
library("embeddr")
fit_pseudotime(PCA, clusters= NULL)
BiocManager::install("princurve")
library("princurve")
fit_pseudotime(PCA, clusters= NULL)
fit= principal_curve(PCA)
fit= principal_curve(PCAX)
Plot(I)
plot(I)
plot(I)
I=principal_curve(PCAX, smoother="smooth.spline")
plot(I)
?princurve
print(I)
plot(I$lambda)
plot(I)
plot(PCA)
plot.PCA(PCA$x)
plot(PCA)
PCA$x[1:10]
PCA[1:10]
PCAX= as.matrix(PCA$x, c[,1:10])
I=principal_curve(PCAX, smoother="smooth.spline")
print(I)
plot(PCA)
plot(PCA$lambda)
plot(I$lambda)
I=principal_curve(PCA, smoother="smooth.spline")
PCAmat=as.matrix(PCA)
I=principal_curve(PCAmat, smoother="smooth.spline")
PCAX= as.matrix(PCA$x, c[,1:10])
PCAX= as.matrix(PCA$x, c[1:10])
I=principal_curve(PCAX, smoother="smooth.spline")
print(I)
plot(I$lambda)
PCAmat= as.matrix(PCA, c[1:10])
I=principal_curve(PCAmat, smoother="smooth.spline")
PCAmat= as.matrix(PCA, c[1:10])
I=principal_curve(PCAmat, smoother="smooth.spline")
PCAX= as.matrix(PCA$x, c[,1:10])
I=principal_curve(PCAX, smoother="smooth.spline")
print(I)
plot(I$center)
plot(I$center, xlim=alim)
plot(I$center, xlim=1000)
plot(I$center, xlim=100)
plot(I$center)
plot(I$x)
plot(I$lambda)
plot(I)
I=PCA$x %>%
as.data.frame %>%
ggplot(aes(x=PC1,y=PC2)) + geom_point(size=4) +
theme_bw(base_size=32)
I
J=PCA$lambda %>%
as.data.frame %>%
ggplot(aes(x=PC1,y=PC2)) + geom_point(size=4) +
theme_bw(base_size=32)
J
J=PCA$x %>%
as.data.frame %>%
ggplot(aes(x=PC1,y=PC2)) + geom_point(size=4) +
theme_bw(base_size=32)
J
##Allows us to see the variable in the PCA result
# "X" is the principal components of interest *Source:https://cmdlinetips.com/2019/04/introduction-to-pca-with-r-using-prcomp/
names(PCA)
J=PCA$center %>%
as.data.frame %>%
ggplot(aes(x=PC1,y=PC2)) + geom_point(size=4) +
theme_bw(base_size=32)
J
J=PCA$sdev %>%
as.data.frame %>%
ggplot(aes(x=PC1,y=PC2)) + geom_point(size=4) +
theme_bw(base_size=32)
J
plot(I)
plot(PCA$x)
plot(PCA$center)
plot(PCA$sdev)
plot(PCA$rotation)
plot(PCA$X)
plot(PCA$x)
J=PCA$x %>%
as.data.frame %>%
ggplot(aes(x=PC2,y=PC3)) + geom_point(size=4) +
theme_bw(base_size=32)
J
PCAX
PCAX= as.matrix(PCA$x, c[1:10])
PCAX
View(PCA)
fviz_pca_var(rna.pca, col.var="contrib")
#plot eigenvalues vs variance
barplot(to_plot[,2], names.arg=1:nrow(to_plot),
main = "Variances",
xlab = "Principal Components",
ylab = "Percentage of variances",
col ="steelblue") +
# Add connected line segments to the plot
lines(x = 1:nrow(to_plot), to_plot[, 2],
type="b", pch=19, col = "red")
fviz_screeplot(rna.pca, ncp=10)
I=principal_curve(PCAX, smoother="smooth.spline", ncp=10)
PCAX= as.matrix(PCA$x, ncp=10)
PCAX
head(eigenvalues[, 1:2])
eigenvalues <- rna.pca$eig
head(eigenvalues[, 1:2])
to_plot <- head(eigenvalues[, 1:2])
View(to_plot)
autplot(PCA$x)
autoplot(PCA$x)
autoplot(PCAX)
plot(I$lambda)
I=principal_curve(PCAX, smoother="smooth.spline")
print(I)
plot(I$lambda)
plot(I$lambda, 1:10)
plot(I$lambda)
View(rna9)
ls
load("E:/ISU-Post BVU/Tanner/Iowa_State_Work/PhD_2020_2021/Bioinformatics_for_Biological_data/Final Project/Final_Project_BCB546/.RData")
knitr::opts_chunk$set(echo = TRUE)
Anther_size1 = read.csv("Updated_S1.csv", header= T)
Anther_sort=right_join(rna4, Anther_size1, "cell")
library(monocle)
library("princurve")
library(dplyr)
##PCA for pairwise comparison of replicates
library(readr)
library(tidyverse)
Anther_sort=right_join(rna4, Anther_size1, "cell")
View(Anther_size)
Anther_size1 = read.csv("Updated_S1.csv", header= T)
Anther_sort=right_join(rna4, Anther_size1, "gene")
View(Anther_size1)
Anther_size1 = read.csv("Updated_S1.csv", header= T)
Anther_sort=right_join(rna4, Anther_size1, "gene")
View(Anther_size1)
View(rna4)
Anther_sort=right_join(rna4, Anther_size1, "cell")
Anther_size = read.table("Updated_S1.csv", header= T)
Anther_sort=right_join(rna4, Anther_size, "cell")
Anther_size1 = read.csv("Updated_S1.csv", header= T)
Anther_size2=as.data.frame(Anther-size1)
Anther_size2=as.data.frame(Anther_size1)
Anther_sort=right_join(rna4, Anther_size2, "cell")
View(Anther_size2)
View(rna4)
Anther_size = read.table("Updated_S1.txt", header= T)
Anther_sort=right_join(rna4, Anther_size, "cell")
View(rna4)
View(Anther_size)
Anther_size1 = read.csv("Updated_S1.csv", header= T)
Anther_size2=as.data.frame(Anther_size1)
Anther_sort=right_join(rna4, Anther_size, "cell")
View(Anther_size)
View(Anther_size1)
View(Anther_size)
View(rna4)
View(Anther_size1)
Anther_size = read.table("Updated_S1.txt", sep=" ", header= T)
Anther_sort=right_join(rna4, Anther_size, "cell")
View(Anther_size)
Anther_size = read.table("Updated_S1.txt", sep=",", header= T)
Anther_sort=right_join(rna4, Anther_size, "cell")
Anther_size = read.table("Updated_S1.csv", sep=",", header= T)
Anther_sort=right_join(rna4, Anther_size, "cell")
View(Anther_size)
View(rna4)
rna4a=as.data.frame(rna4)
Anther_size2=as.data.frame(Anther_size)
Anther_sort=right_join(rna4a, Anther_size, "cell")
View(Anther_size)
Anther_sort=right_join(rna4, Anther_size, by.x="cell", by.y= "cell")
Anther_size1 = read.csv("Updated_S1.csv", header= T)
Anther_sort=right_join(rna4, Anther_size1, "cell")
rna4a= as.integer(rna4$cell)
Anther_sort=right_join(rna4a, Anther_size, "cell")
Anther_sort=right_join(rna4a, Anther_size1, "cell")
Anther_size = read.table("Updated_S1.txt", header= T)
Anther_sort=right_join(rna4a, Anther_size, "cell")
Anther_sort=right_join(rna4, Anther_size, "cell")
View(rna4)
View(rna5)
View(rna4)
View(rna3)
View(rna1)
View(rna7)
View(rna9)
#Using Monocle
library(monocle)
Diff_test_res<- differentialGeneTest(rna4[variance2000,],fullModelFormulaStr = "~Media")
variance2000a=as.vector(variance2000)
Diff_test_res<- differentialGeneTest(rna4[variance2000,],fullModelFormulaStr = "~Media")
Diff_test_res<- differentialGeneTest(rna4[variance2000a,],fullModelFormulaStr = "~Media")
Diff_test_res<- differentialGeneTest(rna4[variance2000a,],fullModelFormulaStr = "~Media")
variance2000a=as.character(variance2000)
Diff_test_res<- differentialGeneTest(rna4[variance2000a,],fullModelFormulaStr = "~Media")
HSMM <- setOrderingFilter(rna4, variance2000)
HSMM <- setOrderingFilter(rna10)
=======
#rename the columns..replace spaces with underscore and lower case
table1.1 <- table1 %>%
select_all(~gsub("\\s", "_", .)) %>%
select_all(tolower)
View(table1.1)
]
#rename anthersize column name
colnames(table1.1)[3] <- 'anther_size_mm'
table1.2 <- table1.1 %>%  filter(quality_control=="PASS") %>%  select(cell_number, plant_number ,anther_size_mm)
View(table1.2)
View(table1.2)
View(cells)
>>>>>>> f70304f5f81e1813efcc6d712571f4e8ca3c1fb4
knitr::opts_chunk$set(echo = TRUE)
#Dependencies
library("tidyverse")
library("factoextra")
library("FactoMineR")
suppressMessages(library(tidyverse))
#Read data
rna <- read_csv('./GSE121039_AR_scRNAseq_transcript_counts.csv')
na <- rename(rna, gene = X1)
#get into long format
rna1 <- pivot_longer(rna, cols = starts_with('Cell'))
#separate name into 4 columns
#rename the columns
#select the columns
rna3 <- separate(rna1, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% select(c(gene, cell, rep, count))
rna3 <- separate(rna1, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% select(c(gene, cell, rep, count))
rna <- rename(rna, gene = X1)
#get into long format
rna1 <- pivot_longer(rna, cols = starts_with('Cell'))
rna1[1:5]
rna1[1:5,]
suppressMessages(library(tidyverse))
#Read data
rna <- read_csv('./GSE121039_AR_scRNAseq_transcript_counts.csv')
rna <- rename(rna, gene = X1)
rna3 <- separate(rna1, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% select(c(gene, cell, rep, count))
setwd("E:/ISU-Post BVU/Tanner/Iowa_State_Work/PhD_2020_2021/Bioinformatics_for_Biological_data/Final Project")
n.cells <- unique(as.numeric(rna3$cell))
min(n.cells)
max(n.cells)
#We get 206 cells??
#Find which cells are absent?
which(!(seq(min(n.cells), max(n.cells)) %in% n.cells))
#cells missing
#42,95,166,167,168,169,186,187,189
#list of all cells that failed to pass QC test
#obtained from Table1 of paper
#notice the cells missing from n.cells are here!!
failed <- c(8,12,18,22,25,42,52,54,55,62,63,64,66,67,69,73,75,
76,77,81,82,83,84,86,88,89,90,91,92,93,95,96,106,113,
121,123,124,127,129,130,140,141,142,143,144,145,146,147,
148,149,153,157,163,165,166,167,168,169,170,171,172,173,
176,182,185,186,187,188,189,191,194,216)
#Filter following cells that failed to pass QC
rna4 <- filter(rna3, !cell %in% failed)
##convert cell & rep into numeric & Count unique cells.
n.cells2 <- unique(as.numeric(rna4$cell)) #now we have 144 cells
#rna4 contains all cells that passed QC and were used in the analysis
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
#pooling cells using sum
rna5 <- rna4 %>%  group_by(gene,cell,) %>% summarise(n=n(), sum = sum(count))
View(rna4)
rna4{1:10,]
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
#pooling cells using sum
rna5 <- rna4 %>%  group_by(gene,cell,) %>% summarise(n=n(), sum = sum(count))
n.cells3 <- unique(as.numeric(rna5$cell))
rna6 <- filter(rna5, n!=1)
n.cells4 <- unique(as.numeric(rna6$cell)) #We get 128 cells
<<<<<<< HEAD
View(rna5)
View(rna4)
View(rna4)
rna7 <- rna4 %>%  unite("cell",c(cell, rep), sep = "_") %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
setwd("E:/ISU-Post BVU/Tanner/Iowa_State_Work/PhD_2020_2021/Bioinformatics_for_Biological_data/Final Project/Final_Project_BCB546")
knitr::opts_chunk$set(echo = TRUE)
ANTHER1=read.csv("with_anther_size", header=T)
#Dependencies
library("tidyverse")
library("factoextra")
library("FactoMineR")
library("readxl")
=======
#PCA
#pivot the data wider for PCA
#First join two columns (cell, rep) into one column cell
#Pivot wider
rna7 <- rna4 %>%  unite("cell",c(cell, rep), sep = "_") %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
#Could not get prcomp to work here so I had to find alternatives
library("FactoMineR")
#library(devtools)
#install_github("kassambara/factoextra")
library("factoextra")
#rna8 <- rna7 %>%  rename(" " = gene)
#pca
#remove gene title
rna9 <- rna7 %>% remove_rownames %>% column_to_rownames(var = "gene")
# transpose data frame so cells are row and genes are columns
rna9 <- as.data.frame(t(as.matrix(rna9)))
rna.pca <- PCA(rna9, graph=FALSE)
print(rna.pca)
eigenvalues <- rna.pca$eig
head(eigenvalues[, 1:2])
to_plot <- head(eigenvalues[, 1:2], n=10)
#plot eigenvalues vs variance
barplot(to_plot[,2], names.arg=1:nrow(to_plot),
main = "Variances",
xlab = "Principal Components",
ylab = "Percentage of variances",
col ="steelblue") +
# Add connected line segments to the plot
lines(x = 1:nrow(to_plot), to_plot[, 2],
type="b", pch=19, col = "red")
#screenplot
fviz_screeplot(rna.pca, ncp=10)
#plot.PCA(rna.pca, axes = c(1,2), choix=c("ind", "var"))
fviz_pca_var(rna.pca, col.var="contrib")
#remove columns with zero variance
rna9.1 <- rna9[ , which(apply(rna9, 2, var)!=0)]
rna.pca2 <- prcomp(rna9.1[,2:ncol(rna9.1)], center=TRUE, scale.=TRUE)
#shows variance explained by each PC
#summary(rna.pca2)
#library(devtools)
#install_github("vqv/ggbiplot")
library(ggbiplot)
ggbiplot(rna.pca2, labels = rownames(rna9.1), xlab="PC1 13.5% var", ylab="PCA2 4.2% Var")
library(ggfortify)
autoplot(rna.pca2)
#rna.pca3 <- prcomp(rna7[,2:ncol(rna7)], center=TRUE, scale.=TRUE)
#summary(rna.pca3)
#read table1
table1 <- readxl::read_xlsx("aav6428_Nelms_Table-S1.xlsx", sheet = 'Table S1')
#rename the columns..replace spaces with underscore and lower case
table1.1 <- table1 %>%
select_all(~gsub("\\s", "_", .)) %>%
select_all(tolower)
#rename anthersize column name
colnames(table1.1)[3] <- 'anther_size_mm'
#filter only cells that passed
table1.2 <- table1.1 %>%  filter(quality_control=="PASS") %>%  select(cell_number, plant_number ,anther_size_mm)
pca3 <- prcomp(table1.2[,2:ncol(table1.2)], center = TRUE, scale. = TRUE)
summary(pca3)
ggbiplot::ggbiplot(pca3, groups = colnames(table1.2)[1])
autoplot(pca3, data=table1.2, colour = 'anther_size_mm')
######################
with_reps <- rna4 %>% pivot_wider(names_from = gene, values_from= count)
#remove variables with zero variance
with_reps1 <- with_reps[ , which(apply(with_reps, 2, var)!=0)]
new_pca <- prcomp(with_reps1[,3:ncol(with_reps1)],center = TRUE, scale. = TRUE)
autoplot(new_pca, data = with_reps1, colour='rep')
ggbiplot::ggbiplot(new_pca, data = with_reps1, group='rep')
#without removing the variance
new_pca2 <- prcomp(with_reps[,3:ncol(with_reps)])
#autoplot(new_pca2, data = with_reps1, colour='rep')
ggbiplot::ggbiplot(new_pca, data = with_reps1, group='rep',)
#####################
#use rna6
rna66 <- rna6 %>% filter(sum > 100)
#get into long format
with_reps_pivot <- pivot_longer(with_reps, cols = colnames(with_reps)[3:ncol(with_reps)])
##group...can't ungroup
with_reps_grouped <- with_reps_pivot %>%  group_by(cell,name) %>% dplyr::summarise(n=n(), sum=sum(value, na.rm = TRUE)) %>% filter(sum > 100, n==2) %>% arrange(as.numeric(cell))
w_r_wider <- with_reps_grouped %>% pivot_wider(names_from = name, values_from = sum, values_fill = 0) %>%  arrange(as.numeric(cell))
##allows to ungroup
with_reps_grouped2 <- with_reps_pivot %>%  group_by(cell,name) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100) %>%  arrange(as.numeric(cell)) %>% ungroup()
xx <- with_reps_grouped2 %>%  filter(n !=1)
xy <- xx %>% pivot_wider(names_from = name, values_from = value, values_fill = 0) %>% arrange(as.numeric(cell))
trials <- rna6 %>%  group_by(gene) %>% dplyr::summarise(n= n(), sum=sum(sum)) %>% filter(sum > 100)
xz <- filter(trials, n == 128)
w_trial <- trials %>% pivot_wider(names_from = name, values_from = sum, values_fill = 0)
knitr::opts_chunk$set(echo = TRUE)
#Dependencies
suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("factoextra"))
suppressPackageStartupMessages(library("FactoMineR"))
suppressPackageStartupMessages(library("ggfortify"))
#Set working directory
setwd('.')
getwd()
#list.files()
>>>>>>> f70304f5f81e1813efcc6d712571f4e8ca3c1fb4
# Counts
rna <- read_csv('./GSE121039_AR_scRNAseq_transcript_counts.csv')
rna <- rename(rna, gene = X1) #rename first column
# Quality control: PASS/FAIL
<<<<<<< HEAD
qc <- readxl::read_excel('./aav6428_Nelms_Table-S1.xlsx', sheet = "Table S1")
=======
qc <- readxl::read_excel('./aav6428_Nelms_Table-S1.xlsx', sheet = 'Table S1')
>>>>>>> f70304f5f81e1813efcc6d712571f4e8ca3c1fb4
names(qc)[12] <- 'QC'
qc <- qc[qc$QC == "PASS", "Cell Number"]
# Deferentially expressed genes during specific stages
deg <- readxl::read_excel('./aav6428_Nelms_Table-S2.xlsx')[,1:2]
names(deg) <- c('gene', 'phase')
deg <- deg %>% filter(phase != "G1") %>% select(gene)
head(rna)
head(qc)
#get into long format
rna1 <- pivot_longer(rna, cols = starts_with('Cell'))
#separate 'name' into 4 columns,
#rename the columns
#select the columns
rna3 <- separate(rna1, name, into = paste0("y",1:4), sep = " ") %>%
select(!c(y1, y3)) %>% rename(c('cell' = y2, 'rep'= y4, 'count' = value))
#Filter cells based on QC
rna4 <- filter(rna3, cell %in% qc$`Cell Number`)
dim(rna4)
head(rna4)
paste0("Total number of cells after Quality Control: ", length(unique(as.numeric(rna4$cell))))
<<<<<<< HEAD
##convert cell & rep into numeric & Count unique cells.
n.cells2 <- unique(as.numeric(rna4$cell)) #now we have 144 cells
#rna4 contains all cells that passed QC and were used in the analysis
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
#pooling cells using sum
rna5 <- rna4 %>%  group_by(gene,cell,) %>% summarise(n=n(), sum = sum(count))
=======
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
#pooling cells using sum
rna5 <- rna4 %>%  group_by(gene,cell,) %>% summarise(n=n(), sum = sum(count))
View(rna4)
paste("There are ", length(unique(as.numeric(rna5$cell))), " unique cells in rna5")
rna6 <- filter(rna5, n > 1)
paste0("There are ", length(unique(as.numeric(rna6$cell))), " cells with a technical replicate in rna6.")
#Join two columns cell and rep and go wider
rna7 <- rna4 %>%
unite("cell",c(cell, rep), sep = "_") %>%
pivot_wider(names_from = cell, values_from = count, names_prefix = 'cell')
dim(rna7)
#remove gene title
rna9 <- rna7 %>% remove_rownames %>% column_to_rownames(var = "gene")
dim(rna9)
rna7[1:5, 1:5]
rna9[1:5, 1:4]
# transpose data frame so cells are rows and genes are columns
rna9_t <- as.data.frame(t(as.matrix(rna9)))
# next two chunks for getting rid of 'unreplicated' cells
cells <- as.data.frame(row.names(rna9_t))
names(cells) <- 'key'
cells %>%
separate(key, c('cell', 'rep'), remove = F) %>%
group_by(cell) %>% filter(n() == 2) %>%
ungroup() %>% select(key) -> cells_after_qc
# filtering out rna9 after quality control
rna9_t %>% rownames_to_column() %>%
filter(rowname %in% cells_after_qc$key) %>%
column_to_rownames() -> rna9_f
# Re arranging rna9_aqc moving cells as columns
rna9_ft <- as.data.frame(t(as.matrix(rna9_t)))
rna9_ft %>% rownames_to_column("gene") -> rna9_ft
# Filtering out genes with less than 100 counts across cells
rna9_ft %>%
arrange(gene) %>% rowwise() %>%
group_by(gene) %>% dplyr::summarise(m = sum(c_across(2:length(rna9_ft)-1))) %>%
filter(m > 100) %>% select(gene) -> exp_genes
rna_ftf <- as_tibble(rna9_ft[rna9_ft$gene %in% exp_genes$gene,])
dim(rna_ftf)
rna_ftfc <- rna_ftf %>% filter(!gene %in% deg$gene)
# Step 1: divided each individual count by the total counts per cell, and multiply by 1000000
rna_norm <- as_tibble(rna_ftfc$gene) # tibble ngenes x 1 for starting fillling with normalized data
for (i in 2:length(rna_ftfc)) {
a <- (rna_ftfc[,i]/sum(rna_ftfc[,i]))*1000000
rna_norm <- cbind(rna_norm, a)
a <- NULL
}
rna_norm <- column_to_rownames(rna_norm, 'value') # for transposing
# Step 2: log transformation after add 11
rna_norm <- log10(rna_norm[,1:length(rna_norm)] + 11 )
rna_norm[1:5, 1:5]
rna_final <- as.data.frame(t(as.matrix(rna_norm)))
rna_final[1:5, 1:5]
PCA = prcomp(rna_final, center=TRUE, scale.=TRUE)
summary(PCA)
PCA$x %>%
as.data.frame %>%
ggplot(aes(x = PC1, y = PC2)) +
geom_point()
View(rna7)
View(rna9_ft)
View(exp_genes)
# Quality control: PASS/FAIL
qc_t <- readxl::read_excel('./aav6428_Nelms_Table-S1.xlsx', sheet = 'Table S1')
# Quality control: PASS/FAIL
table1 <- readxl::read_excel('./aav6428_Nelms_Table-S1.xlsx', sheet = 'Table S1')
#rename the columns..replace spaces with underscore and lower case
table1.1 <- table1 %>%
select_all(~gsub("\\s", "_", .)) %>%
select_all(tolower)
View(table1.1)
#rename anthersize column name
colnames(table1.1)[3] <- 'anther_size_mm'
table1.2 <- table1.1 %>%  filter(quality_control=="PASS") %>%  select(cell_number, anther_size_mm)
View(table1.2)
View(rna5)
View(rna7)
rna4_wide <- rna4 %>% pivot_wider(names_from = gene, values_from = count)
View(rna4_wide)
View(table1.2)
rna4_anther <- cbind(rna4_wide, table1.2)
rna4_anther <- merge(rna4_wide, table1.2, by='cell')
View(table1.1)
#rename anthersize column name
colnames(table1.1)[3] <- 'anther_size_mm'
colnames(table1.1)[1] <- 'cell'
table1.2 <- table1.1 %>%  filter(quality_control=="PASS") %>%  select(cell_number, anther_size_mm)
table1.2 <- table1.1 %>%  filter(quality_control=="PASS") %>%  select(cell, anther_size_mm)
rna4_anther <- merge(rna4_wide, table1.2, by='cell')
View(rna4_anther)
rna4_anther <- merge(rna4_wide, table1.2, by='cell') %>% select(cell, rep, anther_size, everything())
rna4_anther <- merge(rna4_wide, table1.2, by='cell') %>% select(cell, rep, anther_size_mm, everything())
View(rna4_anther)
rna4_anther <- merge(rna4_wide, table1.2, by='cell') %>% select(cell, rep, anther_size_mm, everything()) %>% sort(cell)
rna4_anther <- merge(rna4_wide, table1.2, by='cell') %>% select(cell, rep, anther_size_mm, everything()) %>% arrange(cell)
rna4_anther <- merge(rna4_wide, table1.2, by='cell') %>% select(cell, rep, anther_size_mm, everything()) %>% arrange(as.numeric(cell))
rna4_replicated <- rna4_anther %>% group_by()
rna4_replicated <- rna4_anther %>% group_by(cell) %>% filter(n()==2) %>%  ungroup()
View(rna4_replicated)
View(rna_ftfc)
View(rna_norm)
rna44 <- rna4_replicated %>%  pivot_longer(cols = c(cell, rep, anther_size_mm))
rna4_44 <- rna4_replicated %>%  group_by(cell,anther_size_mm) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100)
rna4_44 <- rna4_replicated %>%  group_by(cell) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100)
rna44 <- rna4_replicated %>%  pivot_longer(cols = c(cell, rep, anther_size_mm))
rna4_44 <- rna4_replicated %>%  group_by(cell, as.character(anther_size_mm)) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100)
rna4_44 <- rna4_replicated %>%  group_by(cell, as.character(anther_size_mm)) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100)
rna4_44 <- rna4_replicated %>%  group_by(cell, as.character(anther_size_mm)) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100)
rna4_replicated <- rna4_anther %>% group_by(cell) %>% filter(n()==2) %>%  ungroup() %>% as.character(anther_size_mm)
rna4_replicated <- rna4_anther %>%  as.character(anther_size_mm) %>% group_by(cell) %>% filter(n()==2) %>%  ungroup() %>%
rna9_ft %>%
arrange(gene) %>% rowwise() %>%
group_by(gene) %>% dplyr::summarise(m = sum(c_across(2:length(rna9_ft)-1))) %>%
filter(m > 100) %>% select(gene) -> exp_genes
rna4_replicated <- rna4_anther %>%  as.character(anther_size_mm) %>% group_by(cell) %>% filter(n()==2) %>%  ungroup()
rna4_replicated <- rna4_anther %>% group_by(cell) %>% filter(n()==2) %>%  ungroup()
as.character(rna4_replicated$anther_size_mm)
rna4_replicated$anther_size_mm <- as.character(rna4_replicated$anther_size_mm)
rna4_44 <- rna4_replicated %>%  group_by(cell,anther_size_mm) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100)
rna44 <- rna4_replicated %>%  pivot_longer(cols = c(cell, rep, anther_size_mm))
View(rna4_wide)
View(rna44)
rna44 <- rna4_replicated %>%  pivot_longer(cols = names(rna4_replicated)[3:ncol(rna4_replicated)])
rna44 <- rna4_replicated %>%  pivot_longer(cols = names(rna4_replicated)[4:ncol(rna4_replicated)])
colnames(rna4_replicated)[1]
colnames(rna4_replicated)[2]
colnames(rna4_replicated)[3]
View(rna44)
#group to filter
rna4_44 <- rna44 %>%  group_by(cell) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100)
View(rna4_44)
#group to filter
rna4_44 <- rna44 %>%  group_by(cell, anther_size_mm) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100)
#group to filter
rna4_44 <- rna44 %>%  group_by(cell, anther_size_mm) %>% dplyr::mutate(n= n(), sum=sum(value))
#group to filter
rna4_44 <- rna44 %>%  group_by(cell, anther_size_mm) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100)
View(rna4_replicated)
View(rna44)
View(rna4_44)
#group to filter
rna4_44 <- rna44 %>%  group_by(gene) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100)
View(rna44)
#group to filter
rna4_44 <- rna44 %>%  group_by(name) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100)
View(rna4_44)
#group to filter
rna4_44 <- rna44 %>%  group_by(name) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100) %>% group_by(cell) %>% filter(n()==2)
View(rna4_44)
#group to filter
rna4_44 <- rna44 %>%  group_by(name) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100)
View(rna4_44)
#group to filter
rna4_44 <- rna44 %>%  group_by(cell,name) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100)
View(rna4_44)
#group to filter
rna4_44 <- rna44 %>%  group_by(cell,name) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100, n==2)
View(rna4_44)
unique(rna4_44$n)
#group to filter
rna4_44 <- rna44 %>%  group_by(cell,name) %>% dplyr::mutate(n= n(), sum=sum(value))
#group to filter
rna4_44 <- rna44 %>%  group_by(cell,name) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100, n==2)
rna4_wider <- rna4_44 %>% pivot_wider(names_from = name, values_from =value)
View(rna4_wider)
knitr::opts_chunk$set(echo = TRUE)
#Dependencies
suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("factoextra"))
suppressPackageStartupMessages(library("FactoMineR"))
suppressPackageStartupMessages(library("ggfortify"))
#Set working directory
setwd('.')
getwd()
#list.files()
# Counts
rna <- read_csv('./GSE121039_AR_scRNAseq_transcript_counts.csv')
rna <- rename(rna, gene = X1) #rename first column
# Quality control: PASS/FAIL
qc <- readxl::read_excel('./aav6428_Nelms_Table-S1.xlsx', sheet = 'Table S1')
names(qc)[12] <- 'QC'
qc <- qc[qc$QC == "PASS", "Cell Number"]
# Deferentially expressed genes during specific stages
deg <- readxl::read_excel('./aav6428_Nelms_Table-S2.xlsx')[,1:2]
names(deg) <- c('gene', 'phase')
deg <- deg %>% filter(phase != "G1") %>% select(gene)
head(rna)
head(qc)
#get into long format
rna1 <- pivot_longer(rna, cols = starts_with('Cell'))
#separate 'name' into 4 columns,
#rename the columns
#select the columns
rna3 <- separate(rna1, name, into = paste0("y",1:4), sep = " ") %>%
select(!c(y1, y3)) %>% rename(c('cell' = y2, 'rep'= y4, 'count' = value))
#Filter cells based on QC
rna4 <- filter(rna3, cell %in% qc$`Cell Number`)
dim(rna4)
head(rna4)
paste0("Total number of cells after Quality Control: ", length(unique(as.numeric(rna4$cell))))
>>>>>>> f70304f5f81e1813efcc6d712571f4e8ca3c1fb4
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
#pooling cells using sum
rna5 <- rna4 %>%  group_by(gene,cell,) %>% summarise(n=n(), sum = sum(count))
paste("There are ", length(unique(as.numeric(rna5$cell))), " unique cells in rna5")
rna6 <- filter(rna5, n > 1)
paste0("There are ", length(unique(as.numeric(rna6$cell))), " cells with a technical replicate in rna6.")
#Join two columns cell and rep and go wider
rna7 <- rna4 %>%
unite("cell",c(cell, rep), sep = "_") %>%
pivot_wider(names_from = cell, values_from = count, names_prefix = 'cell')
dim(rna7)
#remove gene title
rna9 <- rna7 %>% remove_rownames %>% column_to_rownames(var = "gene")
dim(rna9)
rna7[1:5, 1:5]
rna9[1:5, 1:4]
<<<<<<< HEAD
# transpose data frame so cells are row and genes are columns
=======
# transpose data frame so cells are rows and genes are columns
>>>>>>> f70304f5f81e1813efcc6d712571f4e8ca3c1fb4
rna9_t <- as.data.frame(t(as.matrix(rna9)))
# next two chunks for getting rid of 'unreplicated' cells
cells <- as.data.frame(row.names(rna9_t))
names(cells) <- 'key'
cells %>%
separate(key, c('cell', 'rep'), remove = F) %>%
group_by(cell) %>% filter(n() == 2) %>%
ungroup() %>% select(key) -> cells_after_qc
# filtering out rna9 after quality control
rna9_t %>% rownames_to_column() %>%
filter(rowname %in% cells_after_qc$key) %>%
column_to_rownames() -> rna9_f
# Re arranging rna9_aqc moving cells as columns
<<<<<<< HEAD
rna9_ft <- as.data.frame(t(as.matrix(rna9_f)))
=======
rna9_ft <- as.data.frame(t(as.matrix(rna9_t)))
>>>>>>> f70304f5f81e1813efcc6d712571f4e8ca3c1fb4
rna9_ft %>% rownames_to_column("gene") -> rna9_ft
# Filtering out genes with less than 100 counts across cells
rna9_ft %>%
arrange(gene) %>% rowwise() %>%
group_by(gene) %>% dplyr::summarise(m = sum(c_across(2:length(rna9_ft)-1))) %>%
filter(m > 100) %>% select(gene) -> exp_genes
<<<<<<< HEAD
rna_ftf <- as.tibble(rna9_ft[rna9_ft$gene %in% exp_genes$gene,])
dim(rna_ftf)
rna_ftfc <- rna_ftf %>% filter(!gene %in% deg$gene)
# Step 1: divided each individual count by the total counts per cell, and multiply by 1000000
rna_norm <- as.tibble(rna_ftfc$gene) # tibble ngenes x 1 for starting fillling with normalized data
=======
rna_ftf <- as_tibble(rna9_ft[rna9_ft$gene %in% exp_genes$gene,])
dim(rna_ftf)
rna_ftfc <- rna_ftf %>% filter(!gene %in% deg$gene)
# Step 1: divided each individual count by the total counts per cell, and multiply by 1000000
rna_norm <- as_tibble(rna_ftfc$gene) # tibble ngenes x 1 for starting fillling with normalized data
>>>>>>> f70304f5f81e1813efcc6d712571f4e8ca3c1fb4
for (i in 2:length(rna_ftfc)) {
a <- (rna_ftfc[,i]/sum(rna_ftfc[,i]))*1000000
rna_norm <- cbind(rna_norm, a)
a <- NULL
}
rna_norm <- column_to_rownames(rna_norm, 'value') # for transposing
# Step 2: log transformation after add 11
rna_norm <- log10(rna_norm[,1:length(rna_norm)] + 11 )
rna_norm[1:5, 1:5]
rna_final <- as.data.frame(t(as.matrix(rna_norm)))
rna_final[1:5, 1:5]
<<<<<<< HEAD
library(ggplot2)
library("princurve")
library(dplyr)
library(data.table)
library(pheatmap)
#Pseudotime
#Take Juan's Normalized genes and the filter with 2000 genes with highest variance and use for pseudotime. From fig. S3
#Transform data to merge files to use only 2000 genes
rna_final_Tanner= as.data.frame(t(rna_final))
s3= read.csv("aav6428_Nelms_Table-S3.csv", header=T)
#Add a column label to rownames
setDT(rna_final_Tanner, keep.rownames = "gene")[]
#Merge Files
Variance2000transcripts=inner_join(rna_final_Tanner,s3 )### MAke a combined table of all fig s3, order by variance and then slice 2000
y= Variance2000transcripts %>% arrange(desc("Gene score (% variance explained by pseudotime)")) %>%
select(1:258) %>%
top_n(1999)
rna_final
y=(y[1:2000,])
dim(s3)
#Remove gene id column
y$gene=NULL
#Trying the PCA with prcomp
PCA2= prcomp(y, center=TRUE, scale.=FALSE)
summary(PCA)
y= Variance2000transcripts %>% arrange(desc("Gene score (% variance explained by pseudotime)")) %>%
select(1:258) %>%
top_n(2000)
y=(y[1:2000,])
#Remove gene id column
y$gene=NULL
PCA2= prcomp(y, center=TRUE, scale.=FALSE)
plot(PCA2)
PCAX= as.matrix(PCA2$x [,1:10])
PCAX
PCAX= as.matrix(PCA2$x [,1:10])
PCAX
I=principal_curve(PCAX)
print(I)
plot(I)
J=PCA2$x %>%
as.data.frame %>%
ggplot(aes(x=PC1,y=PC2)) + geom_point(size=1) +
theme_bw(base_size=32)
J
name(PCA2)
names(PCA2)
names(PCAX)
names(I)
plot(I$ord)
plot(I$s)
plot(I$ord)
plot(I$dist)
plot(I$converged)
plot(I$num_iterations)
plot(I$call)
plot(I$call)
plot(I)
library(slingshot)
sce.sling <- slingshot(y, reducedDim='PCA')
library(scater)
#####
install.packages(scater)
#####
install.packages("scater")
#####
biocManager::install("Scater")
#####
biocManager::install("scater")
#####
BiocManager::install("scater")
View(y)
y= Variance2000transcripts %>% arrange(desc("Gene score (% variance explained by pseudotime)")) %>%
select(1:258) %>%
top_n(2000)
y=(y[1:2000,])
View(y)
by.cluster <- aggregateAcrossCells(y, ids=col=row.names(y))
by.cluster <- aggregateAcrossCells(y, ids=col=row.names(y))
by.cluster <- aggregateAcrossCells(y, ids=row.names(y))
XY=t(y)
View(XY)
XY=t(y, header=T)
XXY=as.data.frame(XXY, header=T)
XXY=as.data.frame(XY, header=T)
by.cluster <- aggregateAcrossCells(XY, ids=colLabels(XY))
library(scater)
by.cluster <- aggregateAcrossCells(XY, ids=colLabels(XY))
XXXY= as.matrix(XXY)
by.cluster <- aggregateAcrossCells(XY, ids=colLabels(XY))
by.cluster <- aggregateAcrossCells(XXY, ids=colLabels(XY))
by.cluster <- aggregateAcrossCells(XXXY, ids=colLabels(XY))
View(XXY)
XXY=as.data.frame(XY)
names(XXY) <- lapply(XXY[1, ], as.character)
XXY <- XXY[-1,]
View(XXY)
View(XY)
View(XXY)
by.cluster <- aggregateAcrossCells(XXXY, ids=colLabels(XY))
XXXY= as.vector(XXY)
by.cluster <- aggregateAcrossCells(XXXY, ids=colLabels(XY))
ANTHER1=read.csv("with_anther_size", header=T)
View(ANTHER1)
Anter_length_w_genes=inner_join(rna_final_Tanner,s3 )
s4=t(s3)
View(s4)
View(s3)
s3= read.csv("aav6428_Nelms_Table-S3.csv", header=T)
s4=t(s3)
View(s4)
Anther2=t(ANTHER1)
View(Anther2)
View(Anther2)
View(ANTHER1)
Anther2=t(ANTHER1[1,])
View(Anther2)
View(Anter_length_w_genes)
Anter_length_w_genes=inner_join(ANTHER1,s3 )
View(ANTHER1)
View(Anther2)
View(ANTHER1)
Anther2=t(ANTHER1)
View(Anther2)
View(ANTHER1)
View(Anther2)
dim(Anther2)
Anter_length_w_genes=inner_join(ANTHER1[5:12818],s3 )
View(ANTHER1)
S4=t(s3)
View(S4)
Anter_length_w_genes=inner_join(ANTHER1,s4)
Anter_length_w_genes=inner_join(ANTHER1,s4, copy=TRUE)
=======
PCA = prcomp(rna_final, center=TRUE, scale.=TRUE)
summary(PCA)
PCA$x %>%
as.data.frame %>%
ggplot(aes(x = PC1, y = PC2)) +
geom_point()
# Quality control: PASS/FAIL
table1 <- readxl::read_excel('./aav6428_Nelms_Table-S1.xlsx', sheet = 'Table S1')
#rename the columns..replace spaces with underscore and lower case
table1.1 <- table1 %>%
select_all(~gsub("\\s", "_", .)) %>%
select_all(tolower)
#rename anthersize column name
colnames(table1.1)[3] <- 'anther_size_mm'
colnames(table1.1)[1] <- 'cell'
#filter only cells that passed
table1.2 <- table1.1 %>%  filter(quality_control=="PASS") %>%  select(cell, anther_size_mm)
#Join two columns cell and rep and go wider
rna4_wide <- rna4 %>% pivot_wider(names_from = gene, values_from = count)
rna4_anther <- merge(rna4_wide, table1.2, by='cell') %>% select(cell, rep, anther_size_mm, everything()) %>% arrange(as.numeric(cell))
rna4_replicated <- rna4_anther %>% group_by(cell) %>% filter(n()==2) %>%  ungroup()
#make anther_size_mm for grouping purposes
rna4_replicated$anther_size_mm <- as.character(rna4_replicated$anther_size_mm)
#pivot_longer
rna44 <- rna4_replicated %>%  pivot_longer(cols = names(rna4_replicated)[4:ncol(rna4_replicated)])
#group to filter
rna4_44 <- rna44 %>%  group_by(cell,name) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100, n==2)
rna4_wider <- rna4_44 %>% pivot_wider(names_from = name, values_from =value)
pivot
View(table1.1)
View(table1.1)
View(table1.2)
View(rna4)
View(rna4_wide)
View(rna4_anther)
View(rna4_replicated)
rna4_final <- rna4_replicated[ , colSums(rna4_replicated[, 4:ncol(rna4_replicated)] > 100)]
View(rna4_final)
rna4_final <- rna4_replicated[ , colSums(rna4_replicated[, 4:ncol(rna4_replicated)] > 99)]
View(rna4_final)
summarise(rna4_replicated)
summary(rna4_replicated)
sum(rna4_replicated$Zm00001d027231)
summary(rna4_replicated$Zm00001d027373)
View(rna4_replicated)
View(rna4_replicated)
totals <- rna4_replicated[ , colSums(rna4_replicated[, 4:ncol(rna4_replicated)])]
totals <- rna4_replicated[ , colSums(names(rna4_replicated)[4:ncol(rna4_replicated)])]
#pivot_longer
rna44 <- rna4_replicated %>%  pivot_longer(cols = names(rna4_replicated)[4:ncol(rna4_replicated)])
View(rna44)
#group to filter
rna4_44 <- rna44 %>%  group_by(name) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100, n==2)
View(rna4_44)
View(rna44)
View(rna4_replicated)
xx <-  rna4_replicated %>%  filter(colSums() > 100)
xx <-  rna4_replicated %>%  filter(colSums(rna4_replicated) > 100)
xx <-  rna4_replicated %>%  filter(colSums(rna4_replicated)[4:ncol(rna4_replicated)] > 100)
View(rna4_replicated)
#group to filter
rna4_44 <- rna44 %>%  group_by(cell,name) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100, n==2)
View(rna4_44)
View(rna4_44)
rna4_wider <- rna4_44 %>% pivot_wider(names_from = name, values_from =value)
View(rna4_wider)
View(rna4_replicated)
xx<- lapply(rna4_replicated, 2, sum)
xx<- lapply(rna4_replicated, 2, name <- function(x) {
sum(x)
})
xx<- lapply(rna4_replicated, name <- function(x) {
sum(x)
})
xx<- lapply(rna4_replicated, name <- function(x) {
sum(x)
})
>>>>>>> f70304f5f81e1813efcc6d712571f4e8ca3c1fb4
