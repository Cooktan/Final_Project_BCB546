main = "Variances",
xlab = "Principal Components",
ylab = "Percentage of variances",
col ="steelblue") +
# Add connected line segments to the plot
lines(x = 1:nrow(to_plot), to_plot[, 2],
type="b", pch=19, col = "red")
#screenplot
fviz_screeplot(rna.pca, ncp=10)
#plot.PCA(rna.pca, axes = c(1,2), choix=c("ind", "var"))
fviz_pca_var(rna.pca, col.var="contrib")
#remove columns with zero variance
rna9.1 <- rna9[ , which(apply(rna9, 2, var)!=0)]
rna.pca2 <- prcomp(rna9.1[,2:ncol(rna9.1)], center=TRUE, scale.=TRUE)
#shows variance explained by each PC
#summary(rna.pca2)
#library(devtools)
#install_github("vqv/ggbiplot")
library(ggbiplot)
ggbiplot(rna.pca2, labels = rownames(rna9.1), xlab="PC1 13.5% var", ylab="PCA2 4.2% Var")
#rna.pca3 <- prcomp(rna7[,2:ncol(rna7)], center=TRUE, scale.=TRUE)
#summary(rna.pca3)
#read table1
table1 <- readxl::read_xlsx("aav6428_Nelms_Table-S1.xlsx", sheet = 'Table S1')
#rename the columns..replace spaces with underscore and lower case
table1.1 <- table1 %>%
select_all(~gsub("\\s", "_", .)) %>%
select_all(tolower)
#rename anthersize column name
colnames(table1.1)[3] <- 'anther_size_mm'
#filter only cells that passed
table1.2 <- table1.1 %>%  filter(quality_control=="PASS") %>%  select(cell_number, plant_number ,anther_size_mm)
pca3 <- prcomp(table1.2[,2:ncol(table1.2)], center = TRUE, scale. = TRUE)
summary(pca3)
ggbiplot(pca3, groups = colnames(table1.2)[2:3])
View(rna9)
View(rna9)
View(table1.2)
install.packages("ggfortify")
library(ggfortify)
autoplot(rna.pca2)
fviz_pca_var(rna.pca)
fviz_pca_var(rna.pca, col.var="contrib")
View(rna7)
View(table1.2)
table1.2 <- table1.1 %>%  filter(quality_control=="PASS") %>%  select(cell_number, anther_size_mm)
pca3 <- prcomp(table1.2[,2:ncol(table1.2)], center = TRUE, scale. = TRUE)
ggbiplot(pca3, groups = colnames(table1.2)[2:3])
summary(pca3)
View(rna9.1)
View(rna3)
View(rna4)
View(rna5)
View(rna6)
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(tidyverse))
#Set working directory
setwd('.')
getwd()
list.files()
#Read data
rna <- read_csv('./GSE121039_AR_scRNAseq_transcript_counts.csv')
#str(rna)
head(rna)
#rename first column
rna <- rename(rna, gene = X1)
#get into long format
rna1 <- pivot_longer(rna, cols = starts_with('Cell'))
#separate name into 4 columns
#rename the columns
#select the columns
rna3 <- separate(rna1, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% select(c(gene, cell, rep, count))
##convert cell & rep into numeric & Count unique cells.
n.cells <- unique(as.numeric(rna3$cell))
min(n.cells)
max(n.cells)
#We get 206 cells??
#Find which cells are absent?
which(!(seq(min(n.cells), max(n.cells)) %in% n.cells))
#cells missing
#42,95,166,167,168,169,186,187,189
#list of all cells that failed to pass QC test
#obtained from Table1 of paper
#notice the cells missing from n.cells are here!!
failed <- c(8,12,18,22,25,42,52,54,55,62,63,64,66,67,69,73,75,
76,77,81,82,83,84,86,88,89,90,91,92,93,95,96,106,113,
121,123,124,127,129,130,140,141,142,143,144,145,146,147,
148,149,153,157,163,165,166,167,168,169,170,171,172,173,
176,182,185,186,187,188,189,191,194,216)
#Filter following cells that failed to pass QC
rna4 <- filter(rna3, !cell %in% failed)
##convert cell & rep into numeric & Count unique cells.
n.cells2 <- unique(as.numeric(rna4$cell)) #now we have 144 cells
#rna4 contains all cells that passed QC and were used in the analysis
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
#pooling cells using sum
rna5 <- rna4 %>%  group_by(gene,cell,) %>% summarise(n=n(), sum = sum(count))
n.cells3 <- unique(as.numeric(rna5$cell))
rna6 <- filter(rna5, n!=1)
n.cells4 <- unique(as.numeric(rna6$cell)) #We get 128 cells
#PCA
#pivot the data wider for PCA
#First join two columns (cell, rep) into one column cell
#Pivot wider
rna7 <- rna4 %>%  unite("cell",c(cell, rep), sep = "_") %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
rna7.1 <-
#Could not get prcomp to work here so I had to find alternatives
library("FactoMineR")
#library(devtools)
#install_github("kassambara/factoextra")
library("factoextra")
#rna8 <- rna7 %>%  rename(" " = gene)
#pca
#remove gene title
rna9 <- rna7 %>% remove_rownames %>% column_to_rownames(var = "gene")
# transpose data frame so cells are row and genes are columns
rna9 <- as.data.frame(t(as.matrix(rna9)))
rna.pca <- PCA(rna9, graph=FALSE)
print(rna.pca)
eigenvalues <- rna.pca$eig
head(eigenvalues[, 1:2])
to_plot <- head(eigenvalues[, 1:2], n=10)
#plot eigenvalues vs variance
barplot(to_plot[,2], names.arg=1:nrow(to_plot),
main = "Variances",
xlab = "Principal Components",
ylab = "Percentage of variances",
col ="steelblue") +
# Add connected line segments to the plot
lines(x = 1:nrow(to_plot), to_plot[, 2],
type="b", pch=19, col = "red")
#screenplot
fviz_screeplot(rna.pca, ncp=10)
#plot.PCA(rna.pca, axes = c(1,2), choix=c("ind", "var"))
fviz_pca_var(rna.pca, col.var="contrib")
#remove columns with zero variance
rna9.1 <- rna9[ , which(apply(rna9, 2, var)!=0)]
rna.pca2 <- prcomp(rna9.1[,2:ncol(rna9.1)], center=TRUE, scale.=TRUE)
#shows variance explained by each PC
#summary(rna.pca2)
#library(devtools)
#install_github("vqv/ggbiplot")
library(ggbiplot)
ggbiplot(rna.pca2, labels = rownames(rna9.1), xlab="PC1 13.5% var", ylab="PCA2 4.2% Var")
library(ggfortify)
autoplot(rna.pca2)
autoplot()
View(rna3)
View(rna5)
View(rna4)
View(rna7)
######################
with_reps <- rna4 %>% pivot_wider(names_from = gene, values_from= count)
View(with_reps)
######################
with_reps <- rna4 %>% pivot_wider(names_from = gene, values_from= count)
new_pca <- prcomp(with_reps[,3:ncol(with_reps)])
autoplot(new_pca)
autoplot(new_pca, group=with_reps$rep)
autoplot(new_pca, group=colnames(with_reps)[2])
ggbiplot(new_pca, group=colnames(with_reps)[2])
ggbiplot::ggbiplot(new_pca, group=colnames(with_reps)[2])
new_pca <- prcomp(with_reps[,3:ncol(with_reps)],center = TRUE, scale. = TRUE)
new_pca <- prcomp(with_reps[,3:ncol(with_reps)],center = TRUE)
#autoplot(new_pca, group=colnames(with_reps)[2])
ggbiplot::ggbiplot(new_pca, group=colnames(with_reps)[2])
#remove variables with zero variance
with_reps <- with_reps[ , which(apply(with_reps, 2, var)!=0)]
new_pca <- prcomp(with_reps[,3:ncol(with_reps)],center = TRUE, scale. = TRUE)
#autoplot(new_pca, group=colnames(with_reps)[2])
ggbiplot::ggbiplot(new_pca, group=colnames(with_reps)[2])
autoplot(new_pca, group=colnames(with_reps)[2])
######################
with_reps <- rna4 %>% pivot_wider(names_from = gene, values_from= count)
#remove variables with zero variance
with_reps1 <- with_reps[ , which(apply(with_reps, 2, var)!=0)]
new_pca <- prcomp(with_reps1[,3:ncol(with_reps1)],center = TRUE, scale. = TRUE)
######################
with_reps <- rna4 %>% pivot_wider(names_from = gene, values_from= count)
#remove variables with zero variance
with_reps1 <- with_reps[ , which(apply(with_reps, 2, var)!=0)]
new_pca <- prcomp(with_reps1[,3:ncol(with_reps1)],center = TRUE, scale. = TRUE)
autoplot(new_pca, group=colnames(with_reps1)[2])
ggbiplot::ggbiplot(new_pca, group=colnames(with_reps1)[2])
#without removing the variance
with_reps2 < new_pca <- prcomp(with_reps[,3:ncol(with_reps)],center = TRUE, scale. = TRUE)
#without removing the variance
with_reps2 < prcomp(with_reps[,3:ncol(with_reps)],center = TRUE, scale. = TRUE)
######################
with_reps <- rna4 %>% pivot_wider(names_from = gene, values_from= count)
#remove variables with zero variance
with_reps1 <- with_reps[ , which(apply(with_reps, 2, var)!=0)]
new_pca <- prcomp(with_reps1[,3:ncol(with_reps1)],center = TRUE, scale. = TRUE)
autoplot(new_pca, group=colnames(with_reps1)[2])
ggbiplot::ggbiplot(new_pca, group=colnames(with_reps1)[2])
#without removing the variance
with_reps2 < prcomp(with_reps[,3:ncol(with_reps)],center = TRUE, scale. = TRUE)
######################
with_reps <- rna4 %>% pivot_wider(names_from = gene, values_from= count)
#remove variables with zero variance
with_reps1 <- with_reps[ , which(apply(with_reps, 2, var)!=0)]
new_pca <- prcomp(with_reps1[,3:ncol(with_reps1)],center = TRUE, scale. = TRUE)
autoplot(new_pca, group=colnames(with_reps1)[2])
ggbiplot::ggbiplot(new_pca, group=colnames(with_reps1)[2])
#without removing the variance
with_reps2 <- prcomp(with_reps[,3:ncol(with_reps)],center = TRUE, scale. = TRUE)
######################
with_reps <- rna4 %>% pivot_wider(names_from = gene, values_from= count)
#remove variables with zero variance
with_reps1 <- with_reps[ , which(apply(with_reps, 2, var)!=0)]
new_pca <- prcomp(with_reps1[,3:ncol(with_reps1)],center = TRUE, scale. = TRUE)
autoplot(new_pca, group=colnames(with_reps1)[2])
ggbiplot::ggbiplot(new_pca, group=colnames(with_reps1)[2])
#without removing the variance
new_pca2 <- prcomp(with_reps[,3:ncol(with_reps)],center = TRUE, scale. = TRUE)
autoplot(new_pca, color=colnames(with_reps1)[2])
autoplot(new_pca, data = with_reps1, color=colnames(with_reps1)[2])
autoplot(new_pca, data = with_reps1, color='rep')
autoplot(new_pca, data = with_reps1, colour='rep')
ggbiplot::ggbiplot(new_pca, group=colnames(with_reps1)[2])
ggbiplot::ggbiplot(new_pca, data = with_reps1, group='rep')
#without removing the variance
new_pca2 <- prcomp(with_reps[,3:ncol(with_reps)],center = TRUE, scale. = TRUE)
#without removing the variance
new_pca2 <- prcomp(with_reps[,3:ncol(with_reps)])
autoplot(new_pca2, data = with_reps1, colour='rep')
View(new_pca2)
View(new_pca)
set.seed(1)
autoplot(kmeans(with_reps1, 2), data = with_reps1)
autoplot(new_pca2, data = with_reps1, colour='rep')
#autoplot(new_pca2, data = with_reps1, colour='rep')
ggbiplot::ggbiplot(new_pca, group=colnames(with_reps)[2])
knitr::opts_chunk$set(echo = TRUE)
#Dependencies
library("tidyverse")
#Dependencies
library("tidyverse")
library("factoextra")
library("FactoMineR")
#Read data
rna <- read_csv('./GSE121039_AR_scRNAseq_transcript_counts.csv')
#str(rna)
head(rna)
rna <- rename(rna, gene = X1)
#get into long format
rna1 <- pivot_longer(rna, cols = starts_with('Cell'))
#get into long format
rna1 <- pivot_longer(rna, cols = starts_with('Cell'))
rna3 <- separate(rna1, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% select(c(gene, cell, rep, count))
##convert cell & rep into numeric & Count unique cells.
n.cells <- unique(as.numeric(rna3$cell))
min(n.cells)
max(n.cells)
max(n.cells)
#We get 206 cells??
#Find which cells are absent?
which(!(seq(min(n.cells), max(n.cells)) %in% n.cells))
#list of all cells that failed to pass QC test
#obtained from Table1 of paper
#notice the cells missing from n.cells are here!!
failed <- c(8,12,18,22,25,42,52,54,55,62,63,64,66,67,69,73,75,
76,77,81,82,83,84,86,88,89,90,91,92,93,95,96,106,113,
121,123,124,127,129,130,140,141,142,143,144,145,146,147,
148,149,153,157,163,165,166,167,168,169,170,171,172,173,
176,182,185,186,187,188,189,191,194,216)
#Filter following cells that failed to pass QC
rna4 <- filter(rna3, !cell %in% failed)
rm(list=setdiff(ls(), "rna4"))
check_reps <- rna4 %>% group_by(gene, cell) %>% summarise(n = n())
head(check_reps)
to_remove <- paste0(as.character(check_reps$gene[which(check_reps$n != 2)]),
as.character(check_reps$cell[which(check_reps$n != 2)]))
rna4$index <- paste0(rna4$gene, rna4$cell)
match(to_remove,rna4$index)
rna4[2331737,]
to_remove[1]
rna4[2331737,]
to_remove[1]
match(to_remove,rna4$index)
rna4[2331737,] == to_remove[1]
pca_data <- rna4[-match(to_remove,rna4$index),]
dim(pca_data)
dim(rna4)
head(pca_data)
pca_data$rep == 1)
pca_data$rep == 1
pca_data_final <- data.frame(R1 = pca_data$count[which(pca_data$rep == 1)],
R2 = pca_data$count[which(pca_data$rep == 2)])
sum(pca_data$rep == 1)
sum(pca_data$rep == 2)
head(check_reps)
unique(check_reps$n)
unique(check_reps$n)
to_remove <- paste0(as.character(check_reps$gene[which(check_reps$n == 1)]),
as.character(check_reps$cell[which(check_reps$n == 1)]))
pca_data <- rna4[-match(to_remove,rna4$index),]
dim(pca_data)
dim(rna4)
head(pca_data)
pca_data_final <- data.frame(R1 = pca_data$count[which(pca_data$rep == 1)],
R2 = pca_data$count[which(pca_data$rep == 2)])
sum(pca_data$rep == 1)
sum(pca_data$rep == 2)
head(check_reps)
check_reps <- check_reps %>% filter(n == 1)
head(check_reps)
to_remove <- paste0(check_reps$gene, check_reps$cell)
to_remove[1:5]
head(check_reps)
to_remove[1:5]
rna4$index <- paste0(rna4$gene, rna4$cell)
match(to_remove,rna4$index)
pca_data <- rna4[-match(to_remove,rna4$index),]
dim(pca_data)
dim(rna4)
head(pca_data)
pca_data_final <- data.frame(R1 = pca_data$count[which(pca_data$rep == 1)],
R2 = pca_data$count[which(pca_data$rep == 2)])
sum(pca_data$rep == 1)
sum(pca_data$rep == 2)
check_reps <- pca_data %>% group_by(gene, cell) %>% summarise(n = n())
which(check_reps$n != 2)
check_reps[which(check_reps$n != 2),]
str(rna4)
n.cells2 <- unique(as.numeric(rna4$cell)) #now we have 144 cells
#rna4 contains all cells that passed QC and were used in the analysis
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
#pooling cells using sum
rna5 <- rna4 %>%  group_by(gene,cell,) %>% summarise(n=n(), sum = sum(count))
n.cells3 <- unique(as.numeric(rna5$cell))
rna6 <- filter(rna5, n!=1)
n.cells4 <- unique(as.numeric(rna6$cell)) #We get 128 cells
#PCA
#pivot the data wider for PCA
#First join two columns (cell, rep) into one column cell
#Pivot wider
rna7 <- rna4 %>%  unite("cell",c(cell, rep), sep = "_") %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
rna7 <- rna4 %>%  unite("cell",c(cell, rep), sep = "_") %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
rna7 <- rna4 %>%  unite("cell",c(cell, rep), sep = "_") %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
rna <- read_csv('./GSE121039_AR_scRNAseq_transcript_counts.csv')
#str(rna)
head(rna)
#rename first column
rna <- rename(rna, gene = X1)
#get into long format
rna1 <- pivot_longer(rna, cols = starts_with('Cell'))
#separate name into 4 columns
#rename the columns
#select the columns
rna3 <- separate(rna1, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% select(c(gene, cell, rep, count))
##convert cell & rep into numeric & Count unique cells.
n.cells <- unique(as.numeric(rna3$cell))
min(n.cells)
max(n.cells)
#We get 206 cells??
#Find which cells are absent?
which(!(seq(min(n.cells), max(n.cells)) %in% n.cells))
#cells missing
#42,95,166,167,168,169,186,187,189
#list of all cells that failed to pass QC test
#obtained from Table1 of paper
#notice the cells missing from n.cells are here!!
failed <- c(8,12,18,22,25,42,52,54,55,62,63,64,66,67,69,73,75,
76,77,81,82,83,84,86,88,89,90,91,92,93,95,96,106,113,
121,123,124,127,129,130,140,141,142,143,144,145,146,147,
148,149,153,157,163,165,166,167,168,169,170,171,172,173,
176,182,185,186,187,188,189,191,194,216)
#Filter following cells that failed to pass QC
rna4 <- filter(rna3, !cell %in% failed)
##convert cell & rep into numeric & Count unique cells.
n.cells2 <- unique(as.numeric(rna4$cell)) #now we have 144 cells
#rna4 contains all cells that passed QC and were used in the analysis
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
#pooling cells using sum
rna5 <- rna4 %>%  group_by(gene,cell,) %>% summarise(n=n(), sum = sum(count))
n.cells3 <- unique(as.numeric(rna5$cell))
rna6 <- filter(rna5, n!=1)
n.cells4 <- unique(as.numeric(rna6$cell)) #We get 128 cells
#PCA
#pivot the data wider for PCA
#First join two columns (cell, rep) into one column cell
#Pivot wider
rna7 <- rna4 %>%  unite("cell",c(cell, rep), sep = "_") %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
rna9 <- rna7 %>% remove_rownames %>% column_to_rownames(var = "gene")
rna9 <- as.data.frame(t(as.matrix(rna9)))
variance2000 = read.table("2000genE_s3.txt", header= T)
Variance2000transcripts=right_join(rna7,variance2000, "gene")
#Trying the PCA with prcomp
#remove gene title
rna10 <- Variance2000transcripts %>% remove_rownames %>% column_to_rownames(var = "gene")
PCA= prcomp(rna10[, c(2:272)], center=TRUE, scale.=TRUE)
summary(PCA)
plot(PCA)
View(variance2000)
View(Variance2000transcripts)
View(rna1)
View(rna3)
View(rna10)
View(rna7)
View(rna6)
View(rna4)
Anther_size=read.table("Updated_S1.txt", header=T)
Anther_size=read.table("Updated_S1.txt")
Anther_size=read.table("Updated_S1.txt")
Anther_size=read.table("Updated_S1.txt", header=TRUE)
Anther_size=read.csv("Updated_S1.txt", header=TRUE)
View(rna4)
View(Anther_size)
Anther_size=read.tsv("Updated_S1.txt", header=TRUE)
Anther_size=read.table("Updated_S1.txt", header=TRUE)
Anther_size=read.table("Updated_S1.txt", sep=" " header=TRUE)
Anther_size=read.csv("Updated_S1.txt", sep=" " header=TRUE)
Anther_size=read.csv("Updated_S1.csv", header=TRUE)
View(rna4)
Anther_size=read.csv("Updated_S1.csv", header=TRUE)
Anther_sort=right_join(rna4, Anther_size, "cell")
Anther_size
Anther_size=read.csv("Updated_S1.txt", header=TRUE)
Anther_size
Anther_size=read.table("Updated_S1.txt", header=TRUE)
Anther_size=read.table("Updated_S1.txt", sep=" ", header=TRUE)
Anther_size=read.table("Updated_S1.txt", sep=" ", header=TRUE)
Anther_size=read.csv("Updated_S1.txt", sep=" ", header=TRUE)
Anther_size
Anther_size=read.csv("Updated_S1.csv", sep=" ", header=TRUE)
Anther_size
Anther_size=read.csv("Updated_S1.csv", header=TRUE)
Anther_size
load.packages ("Rutils")
install.packages ("Rutils")
library (Rutils)
Anther_size=read.table("Updated_S1.txt", sep=" ", header=TRUE)
Anther_size=read.csv("Updated_S1.txt", sep=" ", header=TRUE)
Anther_size
View(Anther_size)
Anther_size=read.csv("Updated_S1.csv",  header=TRUE)
Anther_size
Anther_size=read.table("Updated_S1.txt",  header=TRUE)
Anther_size=read.table("Updated_S1.csv",  header=TRUE)
Anther_size=read.table("Updated_S1.csv", sep=" " header=TRUE)
Anther_size=read.table("Updated_S1.csv", sep=" " header= TRUE)
Anther_size=read.table("Updated_S1.csv", sep=" ")
Anther_size=read.csv("Updated_S1.csv", sep=" ")
Anther_size
View(Anther_size)
Anther_size=read.csv("Updated_S1.csv", sep=" ")
Anther_size
variance2000 = read.table("2000genE_s3.txt", header= T)
View(variance2000)
Anther_size=read.table("Updated_S1.txt", sep=" ")
library(readr)
Anther_size=read.tsv("Updated_S1.txt", header=T)
library(readr)
Anther_size=read.tsv("Updated_S1.txt", header=T)
library(tidyverse)
Anther_size=read.tsv("Updated_S1.txt", header=T)
Anther_size=read_tsv("Updated_S1.txt", header=T)
Anther_size=read_tsv("Updated_S1.txt", header=TRUE)
Anther_size=read_tsv("Updated_S1.txt")
Anther_size
View(Anther_size)
Anther_sort=right_join(rna4, Anther_size, "cell")
Anther_sizedf=as.dataframe(Anther_size)
Anther_sizedf=as.df(Anther_size)
Anther_sizedf=as.table(Anther_size)
Anther_sizedf=as.data.frame(Anther_size)
Anther_sort=right_join(rna4, Anther_size, "cell")
Anther_sizedf=as.table(Anther_size)
str(Anther_size)
View(Anther_size)
View(rna4)
Anther_sort=right_join(rna4, Anther_sizedf, "cell")
Anther_sizedf=as.data,frame(Anther_size)
Anther_size=read_tsv("Updated_S1.txt")
Anther_sizedf=as.data.frame(Anther_size)
Anther_sort=right_join(rna4, Anther_sizedf, "cell")
Anther_size=read_table("Updated_S1.txt", sep= " ")
Anther_size=read_table("Updated_S1.txt")
View(Anther_size)
Anther_size=read_table("Updated_S1.txt", header=TRUE)
Anther_size=read_table("Updated_S1.txt", header=T)
Anther_size=read_table("Updated_S1.txt")
Anther_size=read_csv("Updated_S1.csv")
Anther_sizedf=as.data.frame(Anther_size)
Anther_sort=right_join(rna4, Anther_sizedf, "cell")
Anther_size=read.table("Updated_S1.csv", header=T)
Anther_sizedf=as.data.frame(Anther_size)
Anther_sort=right_join(rna4, Anther_sizedf, "cell")
View(Anther_size)
Anther_size=read.csv("Updated_S1.csv", header=T)
View(Anther_size)
Anther_size1 = read.table("Updated_S1.txt", header= T)
View(Anther_size1)
Anther_size = read.table("Updated_S1.txt", header= T)
Anther_sort=right_join(rna4, Anther_sizedf, "cell")
View(rna4)
Anther_size = read.table("Updated_S1.txt")
Anther_sort=right_join(rna4, Anther_sizedf, "cell")
Anther_size = read.csv("Updated_S1.csv", header= T)
Anther_sort=right_join(rna4, Anther_sizedf, "cell")
Anther_size = read.table("Updated_S1.txt", header= T)
Anther_sort=right_join(rna4, Anther_sizedf, "cell")
Anther_size = read.table("Updated_S1.txt", header= T)
Anther_sort=right_join(rna4, Anther_size, "cell")
Anther_size = read.csv("Updated_S1.csv", header= T)
Anther_sort=right_join(rna4, Anther_size, "cell")
View(Anther_size)
Anther_size1 = read.csv("Updated_S1.csv", header= T)
