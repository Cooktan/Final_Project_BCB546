getwd()
list.files()
#Read data
rna <- read_csv('./GSE121039_AR_scRNAseq_transcript_counts.csv')
#str(rna)
head(rna)
#rename first column
rna <- rename(rna, gene = X1)
#get into long format
rna1 <- pivot_longer(rna, cols = starts_with('Cell'))
#separate name into 4 columns
#rename the columns
#select the columns
rna3 <- separate(rna1, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% select(c(gene, cell, rep, count))
##convert cell & rep into numeric & Count unique cells.
n.cells <- unique(as.numeric(rna3$cell))
min(n.cells)
max(n.cells)
#We get 206 cells??
#Find which cells are absent?
which(!(seq(min(n.cells), max(n.cells)) %in% n.cells))
#cells missing
#42,95,166,167,168,169,186,187,189
#list of all cells that failed to pass QC test
#obtained from Table1 of paper
#notice the cells missing from n.cells are here!!
failed <- c(8,12,18,22,25,42,52,54,55,62,63,64,66,67,69,73,75,
76,77,81,82,83,84,86,88,89,90,91,92,93,95,96,106,113,
121,123,124,127,129,130,140,141,142,143,144,145,146,147,
148,149,153,157,163,165,166,167,168,169,170,171,172,173,
176,182,185,186,187,188,189,191,194,216)
#Filter following cells that failed to pass QC
rna4 <- filter(rna3, !cell %in% failed)
##convert cell & rep into numeric & Count unique cells.
n.cells2 <- unique(as.numeric(rna4$cell)) #now we have 144 cells
#rna4 contains all cells that passed QC and were used in the analysis
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
#pooling cells using sum
rna5 <- rna4 %>%  group_by(gene,cell,) %>% summarise(n=n(), sum = sum(count))
n.cells3 <- unique(as.numeric(rna5$cell))
rna6 <- filter(rna5, n!=1)
n.cells4 <- unique(as.numeric(rna6$cell)) #We get 128 cells
#PCA
#pivot the data wider for PCA
#First join two columns (cell, rep) into one column cell
#Pivot wider
rna7 <- rna4 %>%  unite("cell",c(cell, rep), sep = "_") %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
#Could not get prcomp to work here so I had to find alternatives
library("FactoMineR")
#library(devtools)
#install_github("kassambara/factoextra")
library("factoextra")
#rna8 <- rna7 %>%  rename(" " = gene)
#pca
#remove gene title
rna9 <- rna7 %>% remove_rownames %>% column_to_rownames(var = "gene")
# transpose data frame so cells are row and genes are columns
rna9 <- as.data.frame(t(as.matrix(rna9)))
rna.pca <- PCA(rna9, graph=FALSE)
print(rna.pca)
eigenvalues <- rna.pca$eig
head(eigenvalues[, 1:2])
to_plot <- head(eigenvalues[, 1:2], n=10)
#plot eigenvalues vs variance
barplot(to_plot[,2], names.arg=1:nrow(to_plot),
main = "Variances",
xlab = "Principal Components",
ylab = "Percentage of variances",
col ="steelblue") +
# Add connected line segments to the plot
lines(x = 1:nrow(to_plot), to_plot[, 2],
type="b", pch=19, col = "red")
#screenplot
fviz_screeplot(rna.pca, ncp=10)
#plot.PCA(rna.pca, axes = c(1,2), choix=c("ind", "var"))
fviz_pca_var(rna.pca, col.var="contrib")
#remove columns with zero variance
rna9.1 <- rna9[ , which(apply(rna9, 2, var)!=0)]
rna.pca2 <- prcomp(rna9.1[,2:ncol(rna9.1)], center=TRUE, scale.=TRUE)
#shows variance explained by each PC
#summary(rna.pca2)
#library(devtools)
#install_github("vqv/ggbiplot")
library(ggbiplot)
ggbiplot(rna.pca2, labels = rownames(rna9.1), xlab="PC1 13.5% var", ylab="PCA2 4.2% Var")
library(ggfortify)
autoplot(rna.pca2)
#rna.pca3 <- prcomp(rna7[,2:ncol(rna7)], center=TRUE, scale.=TRUE)
#summary(rna.pca3)
#read table1
table1 <- readxl::read_xlsx("aav6428_Nelms_Table-S1.xlsx", sheet = 'Table S1')
#rename the columns..replace spaces with underscore and lower case
table1.1 <- table1 %>%
select_all(~gsub("\\s", "_", .)) %>%
select_all(tolower)
#rename anthersize column name
colnames(table1.1)[3] <- 'anther_size_mm'
#filter only cells that passed
table1.2 <- table1.1 %>%  filter(quality_control=="PASS") %>%  select(cell_number, plant_number ,anther_size_mm)
pca3 <- prcomp(table1.2[,2:ncol(table1.2)], center = TRUE, scale. = TRUE)
summary(pca3)
ggbiplot::ggbiplot(pca3, groups = colnames(table1.2)[1])
autoplot(pca3, data=table1.2, colour = 'anther_size_mm')
######################
with_reps <- rna4 %>% pivot_wider(names_from = gene, values_from= count)
#remove variables with zero variance
with_reps1 <- with_reps[ , which(apply(with_reps, 2, var)!=0)]
new_pca <- prcomp(with_reps1[,3:ncol(with_reps1)],center = TRUE, scale. = TRUE)
autoplot(new_pca, data = with_reps1, colour='rep')
ggbiplot::ggbiplot(new_pca, data = with_reps1, group='rep')
#without removing the variance
new_pca2 <- prcomp(with_reps[,3:ncol(with_reps)])
#autoplot(new_pca2, data = with_reps1, colour='rep')
ggbiplot::ggbiplot(new_pca, data = with_reps1, group='rep',)
#####################
#use rna6
rna66 <- rna6 %>% filter(sum > 100)
#get into long format
with_reps_pivot <- pivot_longer(with_reps, cols = colnames(with_reps)[3:ncol(with_reps)])
##group this
with_reps_grouped <- with_reps_pivot %>%  group_by(cell,name) %>% dplyr::summarise(n=n(), sum=sum(value, na.rm = TRUE)) %>% filter(sum > 100, n==2) %>% arrange(as.numeric(cell))
xx <- with_reps_grouped %>% filter(cell==1)
w_r_wider <- with_reps_grouped %>% pivot_wider(names_from = name, values_from = sum, values_fill = 0) %>%  arrange(as.numeric(cell))
w_pca <- prcomp(w_r_wider[, 3:ncol(w_r_wider)])
autoplot(w_pca)
View(with_reps_grouped)
View(with_reps_pivot)
View(w_r_wider)
##allows to ungroup
with_reps_grouped2 <- with_reps_pivot %>%  group_by(cell,name) %>% mutate(sum=sum(value)) %>% filter(sum > 100) %>%  arrange(as.numeric(cell))
View(with_reps_grouped2)
length(with_reps_grouped2$name)
length(unique(with_reps_grouped2$name))
##allows to ungroup
with_reps_grouped2 <- with_reps_pivot %>%  group_by(cell,name) %>% mutate(n= n(), sum=sum(value)) %>% filter(sum > 100) %>%  arrange(as.numeric(cell))
##allows to ungroup
with_reps_grouped2 <- with_reps_pivot %>%  group_by(cell,name) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100) %>%  arrange(as.numeric(cell))
length(unique(with_reps_grouped2$name))
length(with_reps_grouped2$name)
length(unique(with_reps_grouped2$name))
length(unique(with_reps_grouped2$n))
unique(with_reps_grouped2$n)
View(xx)
View(xx)
View(xx)
xx <- with_reps_grouped2 %>%  filter(n !=1)
View(xx)
length(unique(with_reps_grouped2$name))
summary(with_reps_grouped2
k
summary(with_reps_grouped2)
summary(xx)
View(xx)
xy <- xx %>% pivot_wider(names_from = name, values_from = sum, values_fill = 0) %>% arrange(as.numeric(cell))
View(xy)
xy <- xx %>% pivot_wider(names_from = name, values_from = value, values_fill = 0) %>% arrange(as.numeric(cell))
##allows to ungroup
with_reps_grouped2 <- with_reps_pivot %>%  group_by(cell,name) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100) %>%  arrange(as.numeric(cell)) %>% ungroup()
r
xx <- with_reps_grouped2 %>%  filter(n !=1)
View(with_reps_grouped2)
View(with_reps1)
View(with_reps1)
trials <- with_reps_pivot %>%  group_by(name) %>% dplyr::mutate(n= n(), sum=sum(value))
View(trials)
trials <- with_reps_pivot %>%  group_by(name) %>% dplyr::summarise(n= n(), sum=sum(value))
View(trials)
summary(trials)
trials <- with_reps_pivot %>%  group_by(name) %>% dplyr::summarise(n= n(), sum=sum(value)) %>% filter(sum > 100)
View(trials)
trials <- with_reps_pivot %>%  group_by(name) %>% dplyr::summarise(n= n(), sum=sum(value)) %>% filter(sum > 99)
trials <- with_reps_pivot %>%  group_by(name) %>% dplyr::summarise(n= n(), sum=sum(value)) %>% filter(sum > 101)
trials <- with_reps_pivot %>%  group_by(name) %>% dplyr::summarise(n= n(), sum=sum(value)) %>% filter(sum > 105)
trials <- with_reps_pivot %>%  group_by(name) %>% dplyr::summarise(n= n(), sum=sum(value)) %>% filter(sum > 106)
trials <- with_reps_pivot %>%  group_by(name) %>% dplyr::summarise(n= n(), sum=sum(value)) %>% filter(sum > 107)
trials <- with_reps_pivot %>%  group_by(name) %>% dplyr::summarise(n= n(), sum=sum(value)) %>% filter(sum > 108)
w_trial <- trials %>% pivot_wider(names_from = name, values_from = sum, values_fill = 0)
View(w_trial)
w_pca <- prcomp(w_trial[, 2:ncol(w_trial)])
autoplot(w_pca)
w_trial[, 2]
w_trial[, 2:ncol(w_trial)]
autoplot(w_pca)
trials <- with_reps_pivot %>%  group_by(name) %>% dplyr::summarise(n= n(), sum=sum(value)) %>% filter(sum > 107)
trials <- with_reps_pivot %>%  group_by(name) %>% dplyr::summarise(n= n(), sum=sum(value)) %>% filter(sum > 106)
w_trial <- trials %>% pivot_wider(names_from = name, values_from = sum, values_fill = 0)
w_pca <- prcomp(w_trial[, 2:ncol(w_trial)])
autoplot(w_pca)
ggbiplot(w_pca)
ggbiplot::ggbiplot(w_pca)
w_pca$x
View(trials)
mean(trials$sum)
mean(trials$n)
trials <- with_reps_pivot %>%  group_by(name) %>% dplyr::summarise(n= n(), sum=sum(value))
trials <- with_reps_pivot %>%  group_by(name) %>% dplyr::summarise(n= n(), sum=sum(value)) %>% filter(sum > 106)
trials <- with_reps_pivot %>%  group_by(name) %>% dplyr::summarise(n= n(), sum=sum(value)) %>% filter(sum > 100)
trials <- with_reps_pivot %>%  group_by(name) %>% mutate(n= n(), sum=sum(value)) %>% filter(sum > 100)
trials <- with_reps_pivot %>%  group_by(name) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100)
View(trials)
w_trial <- trials %>% pivot_wider(names_from = name, values_from = sum, values_fill = 0)
w_trial <- trials %>% pivot_wider(names_from = name, values_from = sum, values_fill = 0)
trials <- with_reps_pivot %>%  group_by(name) %>% dplyr::summarise(n= n(), sum=sum(value)) %>% filter(sum > 100)
w_trial <- trials %>% pivot_wider(names_from = name, values_from = sum, values_fill = 0)
View(w_trial)
trials <- with_reps_pivot %>%  group_by(name) %>% dplyr::summarise(n= n(), sum=sum(value)) %>% filter(sum > 100) %>% ungroup
w_trial <- trials %>% pivot_wider(names_from = name, values_from = sum, values_fill = 0)
w_trial <- trials %>% pivot_wider(names_from = name, values_from = sum, values_fill = 0)
trials <- with_reps_pivot %>%  group_by(name) %>% dplyr::summarise(n= n(), sum=sum(value)) %>% filter(sum > 100) %>% ungroup
View(trials)
View(with_reps)
View(rna6)
trials <- rna6 %>%  group_by(gene) %>% dplyr::summarise(n= n(), sum=sum(sum))
trials <- rna6 %>%  group_by(gene) %>% dplyr::summarise(n= n(), sum=sum(sum))
View(trials)
xz <- filter(trials, n != 128)
xz <- filter(trials, n > 128)
xz <- filter(trials, n == 128)
View(with_reps1)
trials <- rna6 %>%  group_by(gene) %>% dplyr::summarise(n= n(), sum=sum(sum)) %>% filter(sum > 100)
trials <- rna6 %>%  group_by(gene) %>% dplyr::summarise(n= n(), sum=sum(sum)) %>% filter(sum > 100)
trials <- rna6 %>%  group_by(gene) %>% dplyr::summarise(n= n(), sum=sum(sum)) %>% filter(sum > 99)
trials <- rna6 %>%  group_by(gene) %>% dplyr::summarise(n= n(), sum=sum(sum)) %>% filter(sum > 101)
trials <- rna6 %>%  group_by(gene) %>% dplyr::summarise(n= n(), sum=sum(sum)) %>% filter(sum > 100)
View(trials)
View(trials)
summary(trials)
trials <- rna4 %>%  group_by(gene) %>% dplyr::summarise(n= n(), sum=sum(sum)) %>% filter(sum > 100)
View(rna4)
trials <- rna4 %>%  group_by(gene) %>% dplyr::summarise(n= n(), sum=sum(sum)) %>% filter(sum > 100)
trials <- rna4 %>%  group_by(gene) %>% dplyr::summarise(n= n(), sum=sum(count)) %>% filter(sum > 100)
trials <- rna6 %>%  group_by(gene) %>% dplyr::summarise(n= n(), sum=sum(count)) %>% filter(sum > 100)
trials <- rna6 %>%  group_by(gene) %>% dplyr::summarise(n= n(), sum=sum(sum)) %>% filter(sum > 100)
View(trials)
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(tidyverse))
#Set working directory
setwd('.')
getwd()
list.files()
#Read data
rna <- read_csv('./GSE121039_AR_scRNAseq_transcript_counts.csv')
#str(rna)
head(rna)
#rename first column
rna <- rename(rna, gene = X1)
#get into long format
rna1 <- pivot_longer(rna, cols = starts_with('Cell'))
#separate name into 4 columns
#rename the columns
#select the columns
rna3 <- separate(rna1, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% select(c(gene, cell, rep, count))
##convert cell & rep into numeric & Count unique cells.
n.cells <- unique(as.numeric(rna3$cell))
min(n.cells)
max(n.cells)
#We get 206 cells??
#Find which cells are absent?
which(!(seq(min(n.cells), max(n.cells)) %in% n.cells))
#cells missing
#42,95,166,167,168,169,186,187,189
#list of all cells that failed to pass QC test
#obtained from Table1 of paper
#notice the cells missing from n.cells are here!!
failed <- c(8,12,18,22,25,42,52,54,55,62,63,64,66,67,69,73,75,
76,77,81,82,83,84,86,88,89,90,91,92,93,95,96,106,113,
121,123,124,127,129,130,140,141,142,143,144,145,146,147,
148,149,153,157,163,165,166,167,168,169,170,171,172,173,
176,182,185,186,187,188,189,191,194,216)
#Filter following cells that failed to pass QC
rna4 <- filter(rna3, !cell %in% failed)
##convert cell & rep into numeric & Count unique cells.
n.cells2 <- unique(as.numeric(rna4$cell)) #now we have 144 cells
#rna4 contains all cells that passed QC and were used in the analysis
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
#pooling cells using sum
rna5 <- rna4 %>%  group_by(gene,cell,) %>% summarise(n=n(), sum = sum(count))
n.cells3 <- unique(as.numeric(rna5$cell))
rna6 <- filter(rna5, n!=1)
n.cells4 <- unique(as.numeric(rna6$cell)) #We get 128 cells
#PCA
#pivot the data wider for PCA
#First join two columns (cell, rep) into one column cell
#Pivot wider
rna7 <- rna4 %>%  unite("cell",c(cell, rep), sep = "_") %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
#Could not get prcomp to work here so I had to find alternatives
library("FactoMineR")
#library(devtools)
#install_github("kassambara/factoextra")
library("factoextra")
#rna8 <- rna7 %>%  rename(" " = gene)
#pca
#remove gene title
rna9 <- rna7 %>% remove_rownames %>% column_to_rownames(var = "gene")
# transpose data frame so cells are row and genes are columns
rna9 <- as.data.frame(t(as.matrix(rna9)))
rna.pca <- PCA(rna9, graph=FALSE)
print(rna.pca)
eigenvalues <- rna.pca$eig
head(eigenvalues[, 1:2])
to_plot <- head(eigenvalues[, 1:2], n=10)
#plot eigenvalues vs variance
barplot(to_plot[,2], names.arg=1:nrow(to_plot),
main = "Variances",
xlab = "Principal Components",
ylab = "Percentage of variances",
col ="steelblue") +
# Add connected line segments to the plot
lines(x = 1:nrow(to_plot), to_plot[, 2],
type="b", pch=19, col = "red")
#screenplot
fviz_screeplot(rna.pca, ncp=10)
#plot.PCA(rna.pca, axes = c(1,2), choix=c("ind", "var"))
fviz_pca_var(rna.pca, col.var="contrib")
#remove columns with zero variance
rna9.1 <- rna9[ , which(apply(rna9, 2, var)!=0)]
rna.pca2 <- prcomp(rna9.1[,2:ncol(rna9.1)], center=TRUE, scale.=TRUE)
#shows variance explained by each PC
#summary(rna.pca2)
#library(devtools)
#install_github("vqv/ggbiplot")
library(ggbiplot)
ggbiplot(rna.pca2, labels = rownames(rna9.1), xlab="PC1 13.5% var", ylab="PCA2 4.2% Var")
library(ggfortify)
autoplot(rna.pca2)
#rna.pca3 <- prcomp(rna7[,2:ncol(rna7)], center=TRUE, scale.=TRUE)
#summary(rna.pca3)
#read table1
table1 <- readxl::read_xlsx("aav6428_Nelms_Table-S1.xlsx", sheet = 'Table S1')
#rename the columns..replace spaces with underscore and lower case
table1.1 <- table1 %>%
select_all(~gsub("\\s", "_", .)) %>%
select_all(tolower)
#rename anthersize column name
colnames(table1.1)[3] <- 'anther_size_mm'
#filter only cells that passed
table1.2 <- table1.1 %>%  filter(quality_control=="PASS") %>%  select(cell_number, plant_number ,anther_size_mm)
pca3 <- prcomp(table1.2[,2:ncol(table1.2)], center = TRUE, scale. = TRUE)
summary(pca3)
ggbiplot::ggbiplot(pca3, groups = colnames(table1.2)[1])
autoplot(pca3, data=table1.2, colour = 'anther_size_mm')
######################
with_reps <- rna4 %>% pivot_wider(names_from = gene, values_from= count)
#remove variables with zero variance
with_reps1 <- with_reps[ , which(apply(with_reps, 2, var)!=0)]
new_pca <- prcomp(with_reps1[,3:ncol(with_reps1)],center = TRUE, scale. = TRUE)
autoplot(new_pca, data = with_reps1, colour='rep')
ggbiplot::ggbiplot(new_pca, data = with_reps1, group='rep')
#without removing the variance
new_pca2 <- prcomp(with_reps[,3:ncol(with_reps)])
#autoplot(new_pca2, data = with_reps1, colour='rep')
ggbiplot::ggbiplot(new_pca, data = with_reps1, group='rep',)
#####################
#use rna6
rna66 <- rna6 %>% filter(sum > 100)
#get into long format
with_reps_pivot <- pivot_longer(with_reps, cols = colnames(with_reps)[3:ncol(with_reps)])
##group...can't ungroup
with_reps_grouped <- with_reps_pivot %>%  group_by(cell,name) %>% dplyr::summarise(n=n(), sum=sum(value, na.rm = TRUE)) %>% filter(sum > 100, n==2) %>% arrange(as.numeric(cell))
w_r_wider <- with_reps_grouped %>% pivot_wider(names_from = name, values_from = sum, values_fill = 0) %>%  arrange(as.numeric(cell))
##allows to ungroup
with_reps_grouped2 <- with_reps_pivot %>%  group_by(cell,name) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100) %>%  arrange(as.numeric(cell)) %>% ungroup()
xx <- with_reps_grouped2 %>%  filter(n !=1)
xy <- xx %>% pivot_wider(names_from = name, values_from = value, values_fill = 0) %>% arrange(as.numeric(cell))
trials <- rna6 %>%  group_by(gene) %>% dplyr::summarise(n= n(), sum=sum(sum)) %>% filter(sum > 100)
xz <- filter(trials, n == 128)
w_trial <- trials %>% pivot_wider(names_from = name, values_from = sum, values_fill = 0)
View(trials)
w_trial <- trials %>% pivot_wider(names_from = gene, values_from = sum, values_fill = 0)
View(rna3)
trials <- rna6 %>%  group_by(gene) %>% dplyr::summarise(n= n(), sum=sum(sum)) %>% filter(sum > 100)
trials <- rna4 %>%  group_by(gene) %>% dplyr::summarise(n= n(), sum=sum(sum)) %>% filter(sum > 100)
View(rna4)
trials <- rna4 %>%  group_by(gene) %>% dplyr::summarise(n= n(), sum=sum(count)) %>% filter(sum > 100)
trials <- rna3 %>%  group_by(gene) %>% dplyr::summarise(n= n(), sum=sum(count)) %>% filter(sum > 100)
View(trials)
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(tidyverse))
#Set working directory
setwd('.')
getwd()
list.files()
#Read data
rna <- read_csv('./GSE121039_AR_scRNAseq_transcript_counts.csv')
#str(rna)
head(rna)
#rename first column
rna <- rename(rna, gene = X1)
#get into long format
rna1 <- pivot_longer(rna, cols = starts_with('Cell'))
#separate name into 4 columns
#rename the columns
#select the columns
rna3 <- separate(rna1, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% select(c(gene, cell, rep, count))
##convert cell & rep into numeric & Count unique cells.
n.cells <- unique(as.numeric(rna3$cell))
min(n.cells)
max(n.cells)
#We get 206 cells??
#Find which cells are absent?
which(!(seq(min(n.cells), max(n.cells)) %in% n.cells))
#cells missing
#42,95,166,167,168,169,186,187,189
#list of all cells that failed to pass QC test
#obtained from Table1 of paper
#notice the cells missing from n.cells are here!!
failed <- c(8,12,18,22,25,42,52,54,55,62,63,64,66,67,69,73,75,
76,77,81,82,83,84,86,88,89,90,91,92,93,95,96,106,113,
121,123,124,127,129,130,140,141,142,143,144,145,146,147,
148,149,153,157,163,165,166,167,168,169,170,171,172,173,
176,182,185,186,187,188,189,191,194,216)
#Filter following cells that failed to pass QC
rna4 <- filter(rna3, !cell %in% failed)
##convert cell & rep into numeric & Count unique cells.
n.cells2 <- unique(as.numeric(rna4$cell)) #now we have 144 cells
#rna4 contains all cells that passed QC and were used in the analysis
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
#pooling cells using sum
rna5 <- rna4 %>%  group_by(gene,cell,) %>% summarise(n=n(), sum = sum(count))
n.cells3 <- unique(as.numeric(rna5$cell))
rna6 <- filter(rna5, n!=1)
n.cells4 <- unique(as.numeric(rna6$cell)) #We get 128 cells
#PCA
#pivot the data wider for PCA
#First join two columns (cell, rep) into one column cell
#Pivot wider
rna7 <- rna4 %>%  unite("cell",c(cell, rep), sep = "_") %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
#Could not get prcomp to work here so I had to find alternatives
library("FactoMineR")
#library(devtools)
#install_github("kassambara/factoextra")
library("factoextra")
#rna8 <- rna7 %>%  rename(" " = gene)
#pca
#remove gene title
rna9 <- rna7 %>% remove_rownames %>% column_to_rownames(var = "gene")
# transpose data frame so cells are row and genes are columns
rna9 <- as.data.frame(t(as.matrix(rna9)))
rna.pca <- PCA(rna9, graph=FALSE)
print(rna.pca)
eigenvalues <- rna.pca$eig
head(eigenvalues[, 1:2])
to_plot <- head(eigenvalues[, 1:2], n=10)
#plot eigenvalues vs variance
barplot(to_plot[,2], names.arg=1:nrow(to_plot),
main = "Variances",
xlab = "Principal Components",
ylab = "Percentage of variances",
col ="steelblue") +
# Add connected line segments to the plot
lines(x = 1:nrow(to_plot), to_plot[, 2],
type="b", pch=19, col = "red")
#screenplot
fviz_screeplot(rna.pca, ncp=10)
#plot.PCA(rna.pca, axes = c(1,2), choix=c("ind", "var"))
fviz_pca_var(rna.pca, col.var="contrib")
#remove columns with zero variance
rna9.1 <- rna9[ , which(apply(rna9, 2, var)!=0)]
rna.pca2 <- prcomp(rna9.1[,2:ncol(rna9.1)], center=TRUE, scale.=TRUE)
#shows variance explained by each PC
#summary(rna.pca2)
#library(devtools)
#install_github("vqv/ggbiplot")
library(ggbiplot)
ggbiplot(rna.pca2, labels = rownames(rna9.1), xlab="PC1 13.5% var", ylab="PCA2 4.2% Var")
library(ggfortify)
autoplot(rna.pca2)
#rna.pca3 <- prcomp(rna7[,2:ncol(rna7)], center=TRUE, scale.=TRUE)
#summary(rna.pca3)
#read table1
table1 <- readxl::read_xlsx("aav6428_Nelms_Table-S1.xlsx", sheet = 'Table S1')
#rename the columns..replace spaces with underscore and lower case
table1.1 <- table1 %>%
select_all(~gsub("\\s", "_", .)) %>%
select_all(tolower)
#rename anthersize column name
colnames(table1.1)[3] <- 'anther_size_mm'
#filter only cells that passed
table1.2 <- table1.1 %>%  filter(quality_control=="PASS") %>%  select(cell_number, plant_number ,anther_size_mm)
pca3 <- prcomp(table1.2[,2:ncol(table1.2)], center = TRUE, scale. = TRUE)
summary(pca3)
ggbiplot::ggbiplot(pca3, groups = colnames(table1.2)[1])
autoplot(pca3, data=table1.2, colour = 'anther_size_mm')
######################
with_reps <- rna4 %>% pivot_wider(names_from = gene, values_from= count)
#remove variables with zero variance
with_reps1 <- with_reps[ , which(apply(with_reps, 2, var)!=0)]
new_pca <- prcomp(with_reps1[,3:ncol(with_reps1)],center = TRUE, scale. = TRUE)
autoplot(new_pca, data = with_reps1, colour='rep')
ggbiplot::ggbiplot(new_pca, data = with_reps1, group='rep')
#without removing the variance
new_pca2 <- prcomp(with_reps[,3:ncol(with_reps)])
#autoplot(new_pca2, data = with_reps1, colour='rep')
ggbiplot::ggbiplot(new_pca, data = with_reps1, group='rep',)
#####################
#use rna6
rna66 <- rna6 %>% filter(sum > 100)
#get into long format
with_reps_pivot <- pivot_longer(with_reps, cols = colnames(with_reps)[3:ncol(with_reps)])
##group...can't ungroup
with_reps_grouped <- with_reps_pivot %>%  group_by(cell,name) %>% dplyr::summarise(n=n(), sum=sum(value, na.rm = TRUE)) %>% filter(sum > 100, n==2) %>% arrange(as.numeric(cell))
w_r_wider <- with_reps_grouped %>% pivot_wider(names_from = name, values_from = sum, values_fill = 0) %>%  arrange(as.numeric(cell))
##allows to ungroup
with_reps_grouped2 <- with_reps_pivot %>%  group_by(cell,name) %>% dplyr::mutate(n= n(), sum=sum(value)) %>% filter(sum > 100) %>%  arrange(as.numeric(cell)) %>% ungroup()
xx <- with_reps_grouped2 %>%  filter(n !=1)
xy <- xx %>% pivot_wider(names_from = name, values_from = value, values_fill = 0) %>% arrange(as.numeric(cell))
trials <- rna6 %>%  group_by(gene) %>% dplyr::summarise(n= n(), sum=sum(sum)) %>% filter(sum > 100)
xz <- filter(trials, n == 128)
w_trial <- trials %>% pivot_wider(names_from = name, values_from = sum, values_fill = 0)
