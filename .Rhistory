plot(I$center, xlim=100)
plot(I$center)
plot(I$x)
plot(I$lambda)
plot(I)
I=PCA$x %>%
as.data.frame %>%
ggplot(aes(x=PC1,y=PC2)) + geom_point(size=4) +
theme_bw(base_size=32)
I
J=PCA$lambda %>%
as.data.frame %>%
ggplot(aes(x=PC1,y=PC2)) + geom_point(size=4) +
theme_bw(base_size=32)
J
J=PCA$x %>%
as.data.frame %>%
ggplot(aes(x=PC1,y=PC2)) + geom_point(size=4) +
theme_bw(base_size=32)
J
##Allows us to see the variable in the PCA result
# "X" is the principal components of interest *Source:https://cmdlinetips.com/2019/04/introduction-to-pca-with-r-using-prcomp/
names(PCA)
J=PCA$center %>%
as.data.frame %>%
ggplot(aes(x=PC1,y=PC2)) + geom_point(size=4) +
theme_bw(base_size=32)
J
J=PCA$sdev %>%
as.data.frame %>%
ggplot(aes(x=PC1,y=PC2)) + geom_point(size=4) +
theme_bw(base_size=32)
J
plot(I)
plot(PCA$x)
plot(PCA$center)
plot(PCA$sdev)
plot(PCA$rotation)
plot(PCA$X)
plot(PCA$x)
J=PCA$x %>%
as.data.frame %>%
ggplot(aes(x=PC2,y=PC3)) + geom_point(size=4) +
theme_bw(base_size=32)
J
PCAX
PCAX= as.matrix(PCA$x, c[1:10])
PCAX
View(PCA)
fviz_pca_var(rna.pca, col.var="contrib")
#plot eigenvalues vs variance
barplot(to_plot[,2], names.arg=1:nrow(to_plot),
main = "Variances",
xlab = "Principal Components",
ylab = "Percentage of variances",
col ="steelblue") +
# Add connected line segments to the plot
lines(x = 1:nrow(to_plot), to_plot[, 2],
type="b", pch=19, col = "red")
fviz_screeplot(rna.pca, ncp=10)
I=principal_curve(PCAX, smoother="smooth.spline", ncp=10)
PCAX= as.matrix(PCA$x, ncp=10)
PCAX
head(eigenvalues[, 1:2])
eigenvalues <- rna.pca$eig
head(eigenvalues[, 1:2])
to_plot <- head(eigenvalues[, 1:2])
View(to_plot)
autplot(PCA$x)
autoplot(PCA$x)
autoplot(PCAX)
plot(I$lambda)
I=principal_curve(PCAX, smoother="smooth.spline")
print(I)
plot(I$lambda)
plot(I$lambda, 1:10)
plot(I$lambda)
View(rna9)
ls
load("E:/ISU-Post BVU/Tanner/Iowa_State_Work/PhD_2020_2021/Bioinformatics_for_Biological_data/Final Project/Final_Project_BCB546/.RData")
knitr::opts_chunk$set(echo = TRUE)
Anther_size1 = read.csv("Updated_S1.csv", header= T)
Anther_sort=right_join(rna4, Anther_size1, "cell")
library(monocle)
library("princurve")
library(dplyr)
##PCA for pairwise comparison of replicates
library(readr)
library(tidyverse)
Anther_sort=right_join(rna4, Anther_size1, "cell")
View(Anther_size)
Anther_size1 = read.csv("Updated_S1.csv", header= T)
Anther_sort=right_join(rna4, Anther_size1, "gene")
View(Anther_size1)
Anther_size1 = read.csv("Updated_S1.csv", header= T)
Anther_sort=right_join(rna4, Anther_size1, "gene")
View(Anther_size1)
View(rna4)
Anther_sort=right_join(rna4, Anther_size1, "cell")
Anther_size = read.table("Updated_S1.csv", header= T)
Anther_sort=right_join(rna4, Anther_size, "cell")
Anther_size1 = read.csv("Updated_S1.csv", header= T)
Anther_size2=as.data.frame(Anther-size1)
Anther_size2=as.data.frame(Anther_size1)
Anther_sort=right_join(rna4, Anther_size2, "cell")
View(Anther_size2)
View(rna4)
Anther_size = read.table("Updated_S1.txt", header= T)
Anther_sort=right_join(rna4, Anther_size, "cell")
View(rna4)
View(Anther_size)
Anther_size1 = read.csv("Updated_S1.csv", header= T)
Anther_size2=as.data.frame(Anther_size1)
Anther_sort=right_join(rna4, Anther_size, "cell")
View(Anther_size)
View(Anther_size1)
View(Anther_size)
View(rna4)
View(Anther_size1)
Anther_size = read.table("Updated_S1.txt", sep=" ", header= T)
Anther_sort=right_join(rna4, Anther_size, "cell")
View(Anther_size)
Anther_size = read.table("Updated_S1.txt", sep=",", header= T)
Anther_sort=right_join(rna4, Anther_size, "cell")
Anther_size = read.table("Updated_S1.csv", sep=",", header= T)
Anther_sort=right_join(rna4, Anther_size, "cell")
View(Anther_size)
View(rna4)
rna4a=as.data.frame(rna4)
Anther_size2=as.data.frame(Anther_size)
Anther_sort=right_join(rna4a, Anther_size, "cell")
View(Anther_size)
Anther_sort=right_join(rna4, Anther_size, by.x="cell", by.y= "cell")
Anther_size1 = read.csv("Updated_S1.csv", header= T)
Anther_sort=right_join(rna4, Anther_size1, "cell")
rna4a= as.integer(rna4$cell)
Anther_sort=right_join(rna4a, Anther_size, "cell")
Anther_sort=right_join(rna4a, Anther_size1, "cell")
Anther_size = read.table("Updated_S1.txt", header= T)
Anther_sort=right_join(rna4a, Anther_size, "cell")
Anther_sort=right_join(rna4, Anther_size, "cell")
View(rna4)
View(rna5)
View(rna4)
View(rna3)
View(rna1)
View(rna7)
View(rna9)
#Using Monocle
library(monocle)
Diff_test_res<- differentialGeneTest(rna4[variance2000,],fullModelFormulaStr = "~Media")
variance2000a=as.vector(variance2000)
Diff_test_res<- differentialGeneTest(rna4[variance2000,],fullModelFormulaStr = "~Media")
Diff_test_res<- differentialGeneTest(rna4[variance2000a,],fullModelFormulaStr = "~Media")
Diff_test_res<- differentialGeneTest(rna4[variance2000a,],fullModelFormulaStr = "~Media")
variance2000a=as.character(variance2000)
Diff_test_res<- differentialGeneTest(rna4[variance2000a,],fullModelFormulaStr = "~Media")
HSMM <- setOrderingFilter(rna4, variance2000)
HSMM <- setOrderingFilter(rna10)
knitr::opts_chunk$set(echo = TRUE)
#Dependencies
library("tidyverse")
library("factoextra")
library("FactoMineR")
suppressMessages(library(tidyverse))
#Read data
rna <- read_csv('./GSE121039_AR_scRNAseq_transcript_counts.csv')
na <- rename(rna, gene = X1)
#get into long format
rna1 <- pivot_longer(rna, cols = starts_with('Cell'))
#separate name into 4 columns
#rename the columns
#select the columns
rna3 <- separate(rna1, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% select(c(gene, cell, rep, count))
rna3 <- separate(rna1, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% select(c(gene, cell, rep, count))
rna <- rename(rna, gene = X1)
#get into long format
rna1 <- pivot_longer(rna, cols = starts_with('Cell'))
rna1[1:5]
rna1[1:5,]
suppressMessages(library(tidyverse))
#Read data
rna <- read_csv('./GSE121039_AR_scRNAseq_transcript_counts.csv')
rna <- rename(rna, gene = X1)
rna3 <- separate(rna1, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% select(c(gene, cell, rep, count))
setwd("E:/ISU-Post BVU/Tanner/Iowa_State_Work/PhD_2020_2021/Bioinformatics_for_Biological_data/Final Project")
n.cells <- unique(as.numeric(rna3$cell))
min(n.cells)
max(n.cells)
#We get 206 cells??
#Find which cells are absent?
which(!(seq(min(n.cells), max(n.cells)) %in% n.cells))
#cells missing
#42,95,166,167,168,169,186,187,189
#list of all cells that failed to pass QC test
#obtained from Table1 of paper
#notice the cells missing from n.cells are here!!
failed <- c(8,12,18,22,25,42,52,54,55,62,63,64,66,67,69,73,75,
76,77,81,82,83,84,86,88,89,90,91,92,93,95,96,106,113,
121,123,124,127,129,130,140,141,142,143,144,145,146,147,
148,149,153,157,163,165,166,167,168,169,170,171,172,173,
176,182,185,186,187,188,189,191,194,216)
#Filter following cells that failed to pass QC
rna4 <- filter(rna3, !cell %in% failed)
##convert cell & rep into numeric & Count unique cells.
n.cells2 <- unique(as.numeric(rna4$cell)) #now we have 144 cells
#rna4 contains all cells that passed QC and were used in the analysis
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
#pooling cells using sum
rna5 <- rna4 %>%  group_by(gene,cell,) %>% summarise(n=n(), sum = sum(count))
View(rna4)
rna4{1:10,]
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
#pooling cells using sum
rna5 <- rna4 %>%  group_by(gene,cell,) %>% summarise(n=n(), sum = sum(count))
n.cells3 <- unique(as.numeric(rna5$cell))
rna6 <- filter(rna5, n!=1)
n.cells4 <- unique(as.numeric(rna6$cell)) #We get 128 cells
View(rna5)
View(rna4)
View(rna4)
rna7 <- rna4 %>%  unite("cell",c(cell, rep), sep = "_") %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
setwd("E:/ISU-Post BVU/Tanner/Iowa_State_Work/PhD_2020_2021/Bioinformatics_for_Biological_data/Final Project/Final_Project_BCB546")
knitr::opts_chunk$set(echo = TRUE)
#Dependencies
library("tidyverse")
library("factoextra")
library("FactoMineR")
#Read data
rna <- read_csv('./GSE121039_AR_scRNAseq_transcript_counts.csv')
#str(rna)
head(rna)
#rename first column
rna <- rename(rna, gene = X1)
#get into long format
rna1 <- pivot_longer(rna, cols = starts_with('Cell'))
#separate name into 4 columns
#rename the columns
#select the columns
rna3 <- separate(rna1, name, into = paste0("y",1:4), sep = " ") %>%
rename(c('cell' = y2, 'rep'=y4, 'count' = value)) %>% select(c(gene, cell, rep, count))
##convert cell & rep into numeric & Count unique cells.
n.cells <- unique(as.numeric(rna3$cell))
min(n.cells)
max(n.cells)
#We get 206 cells??
#Find which cells are absent?
which(!(seq(min(n.cells), max(n.cells)) %in% n.cells))
#cells missing
#42,95,166,167,168,169,186,187,189
#list of all cells that failed to pass QC test
#obtained from Table1 of paper
#notice the cells missing from n.cells are here!!
failed <- c(8,12,18,22,25,42,52,54,55,62,63,64,66,67,69,73,75,
76,77,81,82,83,84,86,88,89,90,91,92,93,95,96,106,113,
121,123,124,127,129,130,140,141,142,143,144,145,146,147,
148,149,153,157,163,165,166,167,168,169,170,171,172,173,
176,182,185,186,187,188,189,191,194,216)
#Filter following cells that failed to pass QC
rna4 <- filter(rna3, !cell %in% failed)
##convert cell & rep into numeric & Count unique cells.
n.cells2 <- unique(as.numeric(rna4$cell)) #now we have 144 cells
#rna4 contains all cells that passed QC and were used in the analysis
##dataset to use for e.g. Fig. 2A, Fig S4). We need 128 cells
#pooling cells using sum
rna5 <- rna4 %>%  group_by(gene,cell,) %>% summarise(n=n(), sum = sum(count))
n.cells3 <- unique(as.numeric(rna5$cell))
rna6 <- filter(rna5, n!=1)
n.cells4 <- unique(as.numeric(rna6$cell)) #We get 128 cells
#PCA
#pivot the data wider for PCA
#First join two columns (cell, rep) into one column cell
#Pivot wider
rna7 <- rna4 %>%  unite("cell",c(cell, rep), sep = "_") %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
#pca
#remove gene title
rna9 <- rna7 %>% remove_rownames %>% column_to_rownames(var = "gene")
# transpose data frame so cells are row and genes are columns
rna9 <- as.data.frame(t(as.matrix(rna9)))
View(rna9)
View(rna9)
View(rna7)
Anther_sort$cell <- as.numeric(Anther_sort$cell)
Anther_size = read.table("Updated_S1.txt", header= T)
rna4$cell <- as.numeric(as.character(rna4$cell))
Anther_sort=right_join(rna4, Anther_size, "cell")
rna6 <- filter(rna5, n!=1)
# make the columns the same value type
Anther_sort$cell <- as.numeric(Anther_sort$cell)
Anther_sort$rep <- as.numeric(Anther_sort$rep)
Anther_sort$count <- as.numeric(Anther_sort$count)
rna7T <- Anther_size %>%  unite("cell",c(cell, rep), sep = "_") %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
View(Anther_size)
View(Anther_size)
rna7T <- Anther_size  %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
rna7T <- Anther_sort  %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
View(rna7T)
setwd("E:/ISU-Post BVU/Tanner/Iowa_State_Work/PhD_2020_2021/Bioinformatics_for_Biological_data/Final Project/Final_Project_BCB546")
setwd("E:/ISU-Post BVU/Tanner/Iowa_State_Work/PhD_2020_2021/Bioinformatics_for_Biological_data/Final Project/Final_Project_BCB546")
View(rna7T)
Chr1_Maize_Cleaned_Join_SNP_Geno=rna7T[with(rna7T,order(Anther_size)), ]
rna7_by_anther=rna7T[with(rna7T,order(Anther_size)), ]
rna9T <- rna7T %>% remove_rownames %>% column_to_rownames(var = "gene")
View(rna7_by_anther)
View(rna7_by_anther)
View(rna7T)
View(rna6)
View(rna7)
View(Anther_sort)
View(rna7T)
View(rna4)
View(Anther_sort)
View(rna7)
rna7T <- Anther_sort  %>% pivot_wider(names_from = gene, values_from = count, names_prefix='cell')
View(rna7_by_anther)
rna7T <- Anther_sort  %>% pivot_wider(names_from = gene, values_from = count)
View(rna7T)
rna9T <- rna7T %>% remove_rownames %>% column_to_rownames(var = "gene")
View(rna7T)
rna7_by_anther=rna7T[with(rna7T,order(Anther_size)), ]
dim(rna7_by_anther)
PCAnther= prcomp(rna7_by_anther[, c(6:31190)], center=TRUE, scale.=TRUE)
rnaanther.pca <- PCA(rna7_by_anther, graph=FALSE)
#Trying the PCA with prcomp
#remove gene title
library(missMDA)
#Trying the PCA with prcomp
#remove gene title
install.packages("missPCA")
#Trying the PCA with prcomp
#remove gene title
BiocManager::install("missPCA")
library(missMDA)
library(missPCA)
library(""missPCA")
library("missPCA")
#Trying the PCA with prcomp
#remove gene title
BiocManager::install("missPCA")
library("missPCA")
Imputedrna7= imputePCA(rna7_by_anther)
#Trying the PCA with prcomp
#remove gene title
BiocManager::install("missPCA")
#Trying the PCA with prcomp
#remove gene title
BiocManager::install("missMDA")
#Trying the PCA with prcomp
#remove gene title
BiocManager::install("missMDA")
Imputedrna7= imp
library(missMDA)
Imputedrna7= imputePCA(rna7_by_anther)
View(rna4)
rna7T <- rna7_by_anther %>%  unite("cell",c(cell, rep), sep = "_") %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
View(rna7_by_anther)
View(rna7)
View(rna4)
View(rna7_by_anther)
rna7T <- Anther_sort  %>% pivot_wider(names_from = gene, values_from = count)
rna7TS <- rna7T %>%  unite("cell",c(cell, rep), sep = "_") %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
View(rna7T)
rna7TS <- rna7T %>%  unite("cell",c(cell, rep), sep = "_") %>% pivot_wider(names_from = cell, names_prefix='cell')
View(rna7TS)
PCAnther= prcomp(rna7T[, c(6:31190)], center=TRUE, scale.=TRUE)
View(Anther_size)
View(Anther_sort)
View(Anther_sort)
View(Anther_size)
View(Anther_sort)
View(Anther_sort)
View(Anther_sort)
rna7T <- select(Anther_sort, -c(4:5)) %>% pivot_wider(names_from = gene, values_from = count)
%>% pivot_wider(names_from = gene, values_from = count)
rna7T <- select(Anther_sort, -c(4:5))
View(rna7T)
#REMOVE UNWANTED COLUMNS
rna7T <- Anther_sort %>%  select(Anther_sort, -c(4:5)) %>% pivot_wider(names_from = gene, values_from = count)
#REMOVE UNWANTED COLUMNS
rna7T <- Anther_sort %>%  select(Anther_sort, -c(4:5))
#REMOVE UNWANTED COLUMNS
rna7T <- select(Anther_sort, -c(4:5))
#REMOVE UNWANTED COLUMNS
rnaT <- select(Anther_sort, -c(4:5))
rna7T <- rnaT %>%  unite("cell",c(cell, rep), sep = "_") %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
View(rna7T)
View(rna7TS)
View(Anther_size)
View(Anther_size)
View(Anther_sort)
#REMOVE UNWANTED COLUMNS
rnaT <- select(Anther_sort, -c(5:6))
rna7T <- rnaT %>%  unite("cell",c(cell, rep), sep = "_") %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
Anther_sorted=DM1[with(Anther_sort,order(Anther_size)), ]
Anther_sorted=Anther_sort[with(Anther_sort,order(Anther_size)), ]
#REMOVE UNWANTED COLUMNS
rnaT <- select(Anther_sorted, -c(5:6))
rna7T <- rnaT %>%  unite("cell",c(cell, rep), sep = "_") %>% pivot_wider(names_from = cell, values_from = count, names_prefix='cell')
dim(rna7T)
View(rna7T)
rna7T <- rnaT %>% remove_rownames %>% column_to_rownames(var = "gene")
View(rnaT)
check_reps <- rna4 %>% group_by(gene, cell)
View(check_reps)
View(rna1)
View(rna)
View(rna3)
View(rna1)
View(rna1)
View(rna3)
pca_data_final <- data.frame(R1 = rna4$count[which(pca_data$rep == 1)],
R2 = rna$count[which(pca_data$rep == 2)])
pca_data_final <- data.frame(R1 = rna4$count[which(rna4$rep == 1)],
R2 = rna$count[which(rna$rep == 2)])
View(rna4)
pca_data_final <- data.frame(R1 = rna4$count[which(rna4$rep == 1)],
R2 = rna$count[which(rna4$rep == 2)])
YE=as.dataframe(rna4)
YE=as.data.frame(rna4)
pca_data_final <- data.frame(R1 = YE$count[which(YE$rep == 1)],
R2 = YE$count[which(YE$rep == 2)])
pca_data_final <- as,matrix(R1 = YE$count[which(YE$rep == 1)],
pca_data_final <- as.matrix(R1 = YE$count[which(YE$rep == 1)],
R2 = YE$count[which(YE$rep == 2)])
R1 <- YE$count[which(YE$rep == 1)]
R2 = YE$count[which(YE$rep == 2)]
YE$rep1 <- YE$count[which(YE$rep == 1)]
YE$rep2 = YE$count[which(YE$rep == 2)]
R1<- YE$count[which(YE$rep == 1)]
##Chiteri 1 c 2 b 5e
```{r}
a<- c(R1)
b<- c(R2)
df= data.frame(a,b)
check_reps <- rna4 %>% group_by(gene, cell) %>% summarise(n = n())
head(check_reps)
unique(check_reps$n)
t
str(rna4)
check_reps <- check_reps %>% filter(n == 1)
to_remove <- paste0(check_reps$gene, check_reps$cell)
rna4$index <- paste0(rna4$gene, rna4$cell)
pca_data <- rna4[-match(to_remove,rna4$index),]
check_reps <- pca_data %>% group_by(gene, cell) %>% summarise(n = n())
check_reps[which(check_reps$n != 2),]
pca_data_final <- data.frame(R1 = pca_data$count[which(pca_data$rep == 1)],
R2 = pca_data$count[which(pca_data$rep == 2)])
View(check_reps)
check_reps <- check_reps %>% filter(n == 1) %>% droplevels()
to_remove <- paste0(check_reps$gene, check_reps$cell)
check_reps2 <- check_reps %>% filter(n == 1) %>% droplevels()
check_reps1 <- check_reps %>% filter(n == 2) %>% droplevels()
check_reps2 <- check_reps %>%  filter(rna4$reps,n == 1) %>% droplevels()
check_reps2 <- rna4 %>%  filter(rna4$reps,n == 1) %>% droplevels()
check_reps2 <- rna4 %>%  filter(rna4$rep,n == 1) %>% droplevels()
check_reps2 <-  filter(rna4$rep,n == 1) %>% droplevels()
rna4.df= as.data.frame(rna4)
rna4.df %>% filter(n == 1) %>% droplevels()
rna4.df= as.vector(rna4)
rna4.df %>% filter(n == 1) %>% droplevels()
HHHHH <-  filter(rna4.df$rep,n == 1) %>% droplevels()
rna4.df= as.matrixr(rna4)
rna4.df= as.matrix(rna4)
HHHHH <-  filter(rna4.df$rep,n == 1) %>% droplevels()
install.packages('LearnBayes')
library(LearnBayes)
HHHHH <-  rna4(rna4$rep,n == 1,)
HHHHH <-  subset(rna4$rep,n == 1,)
View(rna4)
HHHHH <- rna4 %>% select(rep) %>% filter( rep =="1")
JJJJJ <- rna4 %>% select(rep) %>% filter( rep =="2")
df= data.frame(a,b)
HHHHH <- rna4 %>% select(rep) %>% filter( rep !="1")
JJJJJ <- rna4 %>% select(rep) %>% filter( rep !="2")
a= c(HHHHH)
b=c(JJJJJ)
df= data.frame(a,b)
df= as.matrix(a,b)
View(df)
df= as.vector(a,b)
df= as.vector(a,b)
HHHHH <- rna4 %>% select(rep) %>% filter( rep =="1") %>% droplevels()
View(HHHHH)
JJJJJ <- rna4 %>% select(rep) %>% filter( rep =="2")%>% droplevels()
df= dataframe(a,b)
df= data.frame(a,b)
HHHHH <- rna4 %>% group_by(cell, rep) %>% filter( rep =="2") %>% remove(rna4$cells[rep!=2])
HHHHH <- rna4 %>% group_by(cell, rep) %>% filter( rep =="2") %>% remove(rna4$cells[rep!="2"])
HHHHH <- rna4 %>% group_by(cell, rep) %>% filter( rep =="2") %>% remove[rep!="2"]
HHHHH <- rna4 %>% group_by(cell, rep) %>% filter( rep =="2") %>% droplevels()
View(HHHHH)
JoinHHHH= right_join(HHHHH, rna4, "cell")
y= as.dataframe(HHHHH)
y= as.data.frame(HHHHH)
JoinHHHH= right_join(y, rna4, "cell")
x= as.data.frame(rna4)
JoinHHHH= right_join(y, x, "cell")
View(x)
View(y)
View(x)
View(y)
y= as.table(HHHHH)
y= as.tibble(HHHHH)
y= as.matrix(HHHHH)
x= as.matrix(rna4)
JoinHHHH= right_join(y, x, "cell")
y= as.data.frame(HHHHH)
x= as.data.frame(rna4)
JoinHHHH= right_join(y, x, "cell")
